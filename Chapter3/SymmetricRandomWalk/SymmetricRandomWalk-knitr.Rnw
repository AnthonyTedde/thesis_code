\documentclass{article}
\usepackage{amsmath, amssymb}

\begin{document}
%\SweaveOpts{concordance=TRUE}

<<echo=FALSE>>=
# Use extrafonts package (especially for ggplot)
library(extrafont)
font_install('fontcm')
# font_import()
#loadfonts()
# 
# font_install('fontcm')
# fonts() -> return all available fonts
library(ggplot2)
library(xtable)
library(plyr)
library(dplyr)
@


\section{Description}
The symetric random walk will be described in this document (Mt). it covers the theory of "Stochastic Calculus for finance" Tome 2 chapter 3 section 1.

The construction of the random walk depend on the evolution of a random variable $X_i$. The previous RV can take two value at each time, like tossing a coin. $X_i$ can take the value 1 or -1.

\begin{equation}
 \label{eq:Xi}
X_i = 
\left \{{
  \begin{array}{c} 1 \\ -1 \end{array}
  }\right .
\end{equation}
 
The Symetric Random Walk is constructed by summing up the different outcome of the random variable $X_i$ from $k$ experiments:

\begin{equation}
\label{eq:SRW}
M_k = 
\sum_{j=1}^k X_j
\end{equation}

In the following lines of code, $X_i$ is randomly difined. The variable $k$ ensure to have a sufficent number of periods to further generate the scaled random walk.
It refers to the $k$ of equation~\ref{eq:SRW}.
$p$ and $q$ are the probability measure, respectively $p$ chance to get value 1 and $q$ chance to get -1 from random variable $X_i$.

 
<<echo=FALSE>>=
p <- 0.5
q <- 1 - p
k <- 300
##
# Generation
##
X <- sample(x = c(-1, 1),
            size = k,
            replace = T,
            prob = c(p, q)
            )
@

After creating the random variable $X_i$ it suffices to add up all the differente output we get from time 1 up to $k$ to get a specific Symetric Random Walk.

The following outcome present a randomly generated 300 steps symmetric random walk.

\begin{table}[h]
<<echo=FALSE>>=
M_k <- c(0, 
         sapply(seq_along(X), function(x){sum(X[1:x])}))
# cat(M_k) 
@
\caption{300 steps Symmetric Random Walk}
\end{table}


\begin{figure}[!h]
\begin{center}

<<echo=FALSE, out.width='100%', message=F, warning=F>>=
# 
# Change the vector Mk to dataframe with 
#   Column1: Time period [0, T]
#   Column2: Outcome of the Symmetric Random Walk at that time.
 df_Mk <- as.data.frame(
  cbind(
  seq_along(M_k) - 1,
  M_k
))
colnames(df_Mk) <- c('x', 'y')

# Plot
(
  SymRandWalk_graph <- ggplot(data = df_Mk, aes(x, y)) +
    geom_line() +
    xlab("Time") + ylab("SRW") +
    theme_minimal() +
    theme(text = element_text(family = "CM Roman"),
          axis.title = element_text(face = "plain"))
)

@


\end{center}
\caption{Symmetric Random Walk}
\end{figure}

<<results='asis'>>=
# Because squared matrix dim(y) = dim(x):
dim_x <- dim_y <- 1:(k + 1) # from 1 to k+1 because we start to time zero nonrandom which equal to zero
# Create the symmetric random walk distribution:
# ifelse is vectorized and therefore is consistent with the using of outer which accept only vectorized function.
Mk <- outer(dim_x, 
           dim_y, 
           FUN=function(r,c){ifelse(c>=r, (c-r) - (r-1), NA_integer_)}) 
colnames(Mk) <- paste0("F(", 1:ncol(Mk) - 1, ")")

# Create the Tex Table > tabular
Mk.tab <- xtable(Mk[1:10, 1:10], digits = 0, format = "latex")
Mk.tab
@

<<>>=
# compute the probability measure to apply on the Random Variable Mk
fi <- outer(dim_x,
            dim_y,
            FUN = function(i, j){choose((j-1), (j-i)) * p^(j-1)})
@

<<>>=
 range <- 1:ncol(Mk)
lastToss <- ncol(Mk)
 # Using ggplot
# data.frame which map distribution and random variable:
distributionSymRanWal <- data.frame(
  Value = Mk[range, lastToss],
  Frequency = fi[range, lastToss]
)

# For the sake of visibility the limit of X axis has been set to [-100, 100]
ggplot(data = distributionSymRanWal, aes(Value, Frequency)) +
  geom_line() +
  scale_x_continuous(limits = c(-100, 100)) +
   theme_minimal() + 
  theme(text = element_text(family="CM Roman"),
        axis.title = element_text(face = "plain"))
@


\section{Martingale property}

\begin{equation}
\mathop{\mathbb{E}}[X] = \sum_{i=1}^N p_i \times x_i
\end{equation}

To show the martingale property we have to show that the expectation of the symmetric random walk $\mathop{\mathbb{E}}[X|F(0)] = M_0 = 0$

<<>>=
 EM200 = sum(Mk[1:200, 200] * fi[1:200, 200]) # equal zero.
@

<<>>=
 ##
# Expectation of Mt_l at k
# denoted by: E[Mt_l|f(k)], with k < l
##
##
# Variables
##
from <- 2 # Departure of the Expectation
k <- 4 # To get the filtration point 
l <- 19 # Give the period to be expected
if(k>l) 
interval <- l-k
##
# Partionated Symmetric Random Walk
##
# first the value of M at time $k$ has to be set. It means that the value at this time $k$ is not yet random but resolved.
# Therefore at time $k$ the variable $M_k$ is not random. 
# We can take any value we want to start with from 1 to $k + 1$.
# I choose to name this variable $from$:
from <- 2 # Departure of the Expectation
# The lenght of the path is already know: $(l - k)$:
len <- l - k
i <- from:(from + len)
j <- k:l
df <- Mk[i, j]
# names(df) <- sapply(1:ncol(df), function(x){paste0("X",x)})
##
# Con 
##

# The probability from k to l start from k to l. The probability table has therefore to be taken from begining.
fi_min <- fi[1:(len+1), 1:(len+1)]
# Old calculation of fi:
# 
# fi <- data.frame(matrix(rep(0, (l-k + 1)^2), nrow = l-k + 1))
# for(j in 1:(l-k+1))
#   for(i in 1:j)
#     fi[i, j] <- choose((j-1), (i-1)) * p^(j-1)#((j-1)*p^(j-1))/(factorial(j-1)*factorial(1+i))
# Finally compute the expectation E[Mt_l|f(k)]:
Mk[from, k] == sum(df[, l-k+1] * fi_min[, l-k+1]) #Yeah it is a matringale


@

\section{Increments of symmetric random walk}
\begin{equation}
M_{k_{i+1}} - M_{K_i} = \sum_{j = k_{i+1}}^{k_{i+1}} X_j = X_{k_{i+1}}
\end{equation}



<<>>=
# Display the graph:
SymRandWalk_graph
@

The previous graph has the following first 10 increments:

<<results='asis'>>=
X_tab <- rbind(X)
colnames(X_tab) <- paste0("F(", 1:300, ")")
xtable(X_tab, digits = 0)
@


\subsection{Expectation and Variance of increments}

\begin{equation}
\mathop{\mathbb{E}}[X_j] = 0 \Rightarrow \mathop{\mathbb{E}}[M_{k_{i+1}} - M_{k_i}] = 0
\end{equation}

\begin{equation}
Var(M_{k_{i+1}}) - M_{k_i}) = k_{i+1} - K_i
\end{equation}

<<>>=
# Xk is the possible outcome of the random variable X:
Xk <- c(1, -1)
# Expectation:
Ex <- weighted.mean(Xk, c(p, q))
Ex.square <- weighted.mean(Xk^2, c(p, q))
# Variance
S <- Ex.square - Ex^2
@

To find the variance the following formula has been used:
\begin{equation}
\begin{array}{lll}
Var(X) & = & \mathop{\mathbb{E}}(X - \mu)^2 \\
& = & \mathop{\mathbb{E}}X^2 + \mu^2 - 2\mu^2 = \mathop{\mathbb{E}}X^2 - \mu^2
\end{array}
\end{equation}

   
\end{document}





















