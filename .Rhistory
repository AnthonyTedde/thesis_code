y1
y2 <- list(
c(1),
c(0),
c(1,0),
c(1,1),
c(0,1),
c(0,0)
)
y2
2^2^2
2^2^1
2^2^0
# clear workspace
rm(list = ls())
gc()
n <- 300
2^5
?seq
l <- list()
seq(0,1)
? combn
letters[1:4]
combn(letters[1:4], 2)
combn(letters[1:4], 4)
combn(letters[1:4], 9)
combn(letters[1:4], 3)
require(utils)
expand.grid(height = seq(60, 80, 5), weight = seq(100, 300, 50),
sex = c("Male","Female"))
v <- c(0,1)
expand.grid(v,v,v,v,v)
matr <- rbind(v,v,v,v,v)
matr
expand.grid(matr)
matr <- cbind(v,v,v,v,v)
expand.grid(matr)
expand.grid(5*v)
toto <- expand.grid(v,v)
toto
expand.grid(toto, v)
list(0:1)
rep(list(0:1))
rep(list(0:1), 300)
rep(0:1,300)
rep(list(0:1), 300)
rep(c(list(0:1)), 300)
as.atomic(rep(clist(0:1), 300))
as.vector(rep(clist(0:1), 300))
l <- rep(list(0:1), 300)
l
expand.grid(l)
l <- rep(list(0:1), 3)
l <- rep(list(0:1), 5)
l
expand.grid(l)
l <- rep(list(0:1), 100)
g <- expand.grid(l)
2^5
2^100
2^30
2^40
l <- rep(list(0:1), 30)
g <- expand.grid(l)
gc()
l <- rep(list(0:1), 30)
g <- expand.grid(l)
gc()
l <- rep(list(0:1), 20)
g <- expand.grid(l)
l
g
g[50]
legth(g)
length(g)
nrow(g)
2^20
class(g)
g[nrow(g), ]
expand.grid
edit(expand.grid)
toto <- function(...){
length(list(...))
}
toto(1:4)
toto(1:4, 1:4)
list(1:4, 1:5)
expand.grid()
as.data.frame(list())
list()
colnames(g)
1:10
paste("var", i)
paste("var", 1:10)
paste("var", 1:10, sep = '')
paste0("var", 1:10)
l
seq_len(5)
seq_len(10)
toto <- vector("list", 10)
toto
toto <- vector("atomic", 10)
?vector
vector(length = 10)
vector("integer", length = 10)
names(l)
nargs(l)
nargs <- list(l)
nargs
nargs==1L
nargs
args <- list(l)
args
nargs <- length(args)
nargs
length(l)
typeof(args)
typeof(l)
str(args)
str(l)
test <- list(1:5, 1:5, 1:5)
test
str(list)
str(test)
length(test)
is.list(args[[1]])
is.list(test[[1]])
args[[1]]
args
args[[1]]
args
args <- args[[1]]
args
names(args)
cargs <- vector("list", nargs)
cargs
nargs <- length(args)
cargs <- vector("list", nargs)
cargs
l
args <- l
args
cargs <- vector("list", nargs)
vector
cargs
args
iArgs <- seq_len(nargs)
iArgs
nmc <- paste0("Var", iArgs)
nmc
nm <- nmc
nm
args
names(args[[2]])
names(args[[2]]) <- "jacky"
names(args)
args[[2]]
args
str(args)
args <- l10n_info()
args <- l
str(args)
names(args) <- paste0("fuckoff"1:20)
names(args) <- paste0("fuckoff",1:20)
str(args)
names(args)
bis <- l
names(bis)
names(bis[[1:4]])
names(bis[[1]])
names(bis[[1]][4])
bis[[1]]
names(bis[[1]]) <- 'toto'
names(bis)
bis
str(bis)
str(args)
bis <- args
list(bis, l)
list(c(bis, l))
names(list(bis, l))
names(list(bis, l)[[1]])
bis <- list(bis, l)[[1]]
bis
str(bis)
str(l)
bis <- list(bis, l)[[2]]
str(bis)
bis <- list()
toto = 1:5
bis <- list()
bis <- list(
toto = 1:5
)
bis
str(bis)
bis <- list(
toto = 1:5,
1:5
)
str(bis)
names(bis)
is.null(names(bis))
nm
nzchar(nm)
l
str(l)
nzchar(l)
nzchar(args)
?nzchar
char <- c("toto", "anthony", "Elsa")
nchar(char)
nzchar(char)
char2 <- list("toto", "pipi")
nchar(char2)
nzchar(char2)
nzchar(args)
nchar(args)
nchar(l)
args[["fuckoff1"]]
nchar(args[["fuckoff1"]])
args
nchar(l)
l
any(nzchar(nm))
any(c(T, F, F))
any(c(F, F, F))
test <- list(1:5)
nzchar(test)
test
test <- list(1:5, 1:6)
nzchar(test)
nchar(test)
str(test)
test <- list(1:5, letters[1:5], c(T,F))
str(test)
nchar(test)
test <- list(1:5, letters[1:5], c(T,F), c(T))
nchar(test)
str(test)
test <- list(1:5, letters[1:4], c(T,F), c(T))
nchar(test)
test <- list(1:5, letters[1:3], c(T,F), c(T))
nchar(test)
str(test[[1]])
str(test[[2]])
nchar(test[[2]])
edit(nchar)
nzchar(null)
nzchar(NULL)
nmc
cargs
names(cargs) <- nmc
str(cargs)
rep.fac <- 1L
rep.fac
d <- lengts(args)
lengths(args)
lengths(args)
length(args)
d
d <- lengths(args)
d
d[1]
list(list(1:5, 2:6))
lengths(list(list(1:3, 1:6)))
length(list(list(1:3, 1:6)))
nmc
d
prod(d)
2^20
orep <- prod(d)
orep
iArgs
args[[1]]
args[[2]]
nx <- length(args[[1]])
nx
orep/nx
x[]
x
x <- args[[1]]
x[]
rep.int(4)
rep.int(rep.int(seq_len(nx), rep.int(rep.fac, nx)), orep)
x[rep.int(rep.int(seq_len(nx), rep.int(rep.fac, nx)), orep)]
str(x[rep.int(rep.int(seq_len(nx), rep.int(rep.fac, nx)), orep)])
rep.int(1:4)
rep.int
?rep.int
rep.int(1:4, 2)
rep(1:4)
rep(1:4, 5)
rep(1:4, 5)
begin <- Sys.time()
rep(1:4, 5)
end <- Sys.time()
totalRep <- end - begin
begin <- Sys.time()
rep.int(1:4, 5)
end <- Sys.time()
totalRep.int <- end - begin
totalRep
totalRep.int
totalRep > totalRep.int
begin <- Sys.time()
rep(1:4, 5000)
end <- Sys.time()
totalRep <- end - begin
begin <- Sys.time()
rep.int(1:4, 5000)
end <- Sys.time()
totalRep.int <- end - begin
totalRep > totalRep.int
totalRep
totalRep.int
n <- 2^20
n <- 2^20
begin <- Sys.time()
test <- rep(1:4, n)
end <- Sys.time()
totalRep <- end - begin
begin <- Sys.time()
test <- rep.int(1:4, n)
end <- Sys.time()
totalRep.int <- end - begin
totalRep
totalRep.int
n <- 10^20
begin <- Sys.time()
test <- rep(1:4, n)
end <- Sys.time()
totalRep <- end - begin
n <- 10^15
begin <- Sys.time()
test <- rep(1:4, n)
end <- Sys.time()
totalRep <- end - begin
n <- 10^10
begin <- Sys.time()
test <- rep(1:4, n)
end <- Sys.time()
totalRep <- end - begin
n <- 10^5
begin <- Sys.time()
test <- rep(1:4, n)
end <- Sys.time()
totalRep <- end - begin
begin <- Sys.time()
test <- rep.int(1:4, n)
end <- Sys.time()
totalRep.int <- end - begin
totalRep
totalRep.int
totalRep > totalRep.int
n <- 20
l <- rep(list(0:1), 20)
assign(paste0(X,n),
value = expand.grid(l))
assign(paste0('X',n),
value = expand.grid(l))
rm(list=ls())
dc()
dv()
gc()
n <- 20
l <- rep(list(0:1), 20)
assign(paste0('X',n),
value = expand.grid(l))
sizeof(Xn)
length(Xn)
paste0('X', n)
length(X20)
X20
str(X20)
nrow(X20)
nrow("X20")
get("X20")
source('~/workspace/thesis/code/Chapter1/Exercise1.4.R', echo=TRUE)
Yn <- paste0('Y', n)
n <- 20
Yn <- paste0('Y', n)
l <- rep(list(0:1), 20)
assign(Yn,
value = expand.grid(l))
X <- vector("integer", n)
X <- vector("integer", nrow(get(Yn)))
length(X)
head(str(Y20))
Y20$Var1
sum(Y20$Var1)
lengths(Y20)
Y20[[1]]
str[1, ]
str(Y20)
toto = expand.grid(0:1, 0:1, 0:1)
toto
toto <- expand.grid(l)
toto[1,]
n <- 20
Yn <- paste0('Y', n)
l <- rep(list(0:1), 20)
assign(Yn,
expand.grid(l))
str(Yn)
str(Y2n)
str(Y20)
Y20[1, ]
truc <- Y20 * 2 ^ -n
truc[1, ]
truc[2, ]
truc[66666, ]
?lapply
?vapply
a <- sapply(Y20 * 2^-n, sum)
str(1)
str(1)
str(a)
a
a <- sapply(t(Y20 * 2^-n), sum)
str(a)
2^20
sum(a)
? t
tY <- t(Y20)
length(tY)
nrow(Y20)
nrow(tY)
20971520/1048576
matrix(1:100, nrows = 5)
matrix(1:100, nrow = 5)
t(matrix(1:100, nrow = 5))
m <- as.matrix(Y20)
ncol(t(m))
2^20
ncol(t(Y20))
a <- t(Y20 * 2^-n)
nrow(a)
ncol(a)
sum(a)
sum(Y20)
sum(Y20)/2^20
sapply(a, sum)
cul <- sapply(a, sum)
str(cul)
a <- rowsum(Y20)
?rowsum
a <- rowSums(Y20)
?rowSums
length(a)
sum(a)
X <- rowSums(get(Yn) / 2^n)
sum(X)
X
hist(X)
plot(x)
plot(X)
n <- 3
Yn <- paste0('Y', n)
l <- rep(list(0:1), 20)
assign(Yn,
expand.grid(l))
X <- rowSums(get(Yn) / 2^n)
X
hist(X)
Y3
n <- 3
Yn <- paste0('Y', n)
l <- rep(list(0:1), 20)
n <- 3
Yn <- paste0('Y', n)
l <- rep(list(0:1), n)
l
assign(Yn,
expand.grid(l))
Y3
X <- rowSums(get(Yn) / 2^n)
X
X <- rowSums(get(Yn) / 2^row(Yn))
for(i in seq_len(n))
for(j in seq_len(2^n))
assign(
Yn[i,j],
get(Yn)[i,j] / 2 ^ i
)
seq_len(n)
seq_len(2^n)
for(j in seq_len(n))
for(i in seq_len(2^n))
assign(
Yn[i,j],
get(Yn)[i,j] / 2 ^ i
)
seq_len(2^n)
Y3
for(j in seq_len(n))
for(i in seq_len(2^n))
Y3[i,j] <- Y3[i,j]
for(j in seq_len(n))
for(i in seq_len(2^n))
Y3[i,j] <- Y3[i,j] / 2 ^ n
Y3
X <- rowSums(get(Yn))
X
for(j in seq_len(n))
for(i in seq_len(2^n))
Y3[i,j] <- Y3[i,j] / 2 ^ j
X <- rowSums(get(Yn))
X
order(X)
X
X[order(X)]
