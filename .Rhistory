rm(list=ls())
dc()
dv()
gc()
n <- 20
l <- rep(list(0:1), 20)
assign(paste0('X',n),
value = expand.grid(l))
sizeof(Xn)
length(Xn)
paste0('X', n)
length(X20)
X20
str(X20)
nrow(X20)
nrow("X20")
get("X20")
source('~/workspace/thesis/code/Chapter1/Exercise1.4.R', echo=TRUE)
Yn <- paste0('Y', n)
n <- 20
Yn <- paste0('Y', n)
l <- rep(list(0:1), 20)
assign(Yn,
value = expand.grid(l))
X <- vector("integer", n)
X <- vector("integer", nrow(get(Yn)))
length(X)
head(str(Y20))
Y20$Var1
sum(Y20$Var1)
lengths(Y20)
Y20[[1]]
str[1, ]
str(Y20)
toto = expand.grid(0:1, 0:1, 0:1)
toto
toto <- expand.grid(l)
toto[1,]
n <- 20
Yn <- paste0('Y', n)
l <- rep(list(0:1), 20)
assign(Yn,
expand.grid(l))
str(Yn)
str(Y2n)
str(Y20)
Y20[1, ]
truc <- Y20 * 2 ^ -n
truc[1, ]
truc[2, ]
truc[66666, ]
?lapply
?vapply
a <- sapply(Y20 * 2^-n, sum)
str(1)
str(1)
str(a)
a
a <- sapply(t(Y20 * 2^-n), sum)
str(a)
2^20
sum(a)
? t
tY <- t(Y20)
length(tY)
nrow(Y20)
nrow(tY)
20971520/1048576
matrix(1:100, nrows = 5)
matrix(1:100, nrow = 5)
t(matrix(1:100, nrow = 5))
m <- as.matrix(Y20)
ncol(t(m))
2^20
ncol(t(Y20))
a <- t(Y20 * 2^-n)
nrow(a)
ncol(a)
sum(a)
sum(Y20)
sum(Y20)/2^20
sapply(a, sum)
cul <- sapply(a, sum)
str(cul)
a <- rowsum(Y20)
?rowsum
a <- rowSums(Y20)
?rowSums
length(a)
sum(a)
X <- rowSums(get(Yn) / 2^n)
sum(X)
X
hist(X)
plot(x)
plot(X)
n <- 3
Yn <- paste0('Y', n)
l <- rep(list(0:1), 20)
assign(Yn,
expand.grid(l))
X <- rowSums(get(Yn) / 2^n)
X
hist(X)
Y3
n <- 3
Yn <- paste0('Y', n)
l <- rep(list(0:1), 20)
n <- 3
Yn <- paste0('Y', n)
l <- rep(list(0:1), n)
l
assign(Yn,
expand.grid(l))
Y3
X <- rowSums(get(Yn) / 2^n)
X
X <- rowSums(get(Yn) / 2^row(Yn))
for(i in seq_len(n))
for(j in seq_len(2^n))
assign(
Yn[i,j],
get(Yn)[i,j] / 2 ^ i
)
seq_len(n)
seq_len(2^n)
for(j in seq_len(n))
for(i in seq_len(2^n))
assign(
Yn[i,j],
get(Yn)[i,j] / 2 ^ i
)
seq_len(2^n)
Y3
for(j in seq_len(n))
for(i in seq_len(2^n))
Y3[i,j] <- Y3[i,j]
for(j in seq_len(n))
for(i in seq_len(2^n))
Y3[i,j] <- Y3[i,j] / 2 ^ n
Y3
X <- rowSums(get(Yn))
X
for(j in seq_len(n))
for(i in seq_len(2^n))
Y3[i,j] <- Y3[i,j] / 2 ^ j
X <- rowSums(get(Yn))
X
order(X)
X
X[order(X)]
# clear workspace
rm(list = ls())
gc()
n <- 3
Yn <- paste0('Y', n)
l <- rep(list(0:1), n)
assign(Yn,
expand.grid(l))
n <- 3
Yn <- paste0('Y', n)
l <- rep(list(0:1), n)
assign(Yn,
expand.grid(l))
l
for(j in seq_len(n))
for(i in seq_len(2^n))
Y3[i,j] <- Y3[i,j] / 2 ^ j
Y3
rowSums(Y3)
X <- rowSums(get(Yn))
sum(X)
X[order(X)]
?assign
n <- 3
Yn <- paste0('Y', n)
l <- rep(list(0:1), n)
assign(Yn,
expand.grid(l))
paste0(c(Yn, '[', i, ',', j ,']'))
paste0(Yn, '[', i, ',', j ,']')
for(j in seq_len(n))
for(i in seq_len(2^n))
assign(
paste0(Yn, '[', i, ',', j ,']'),
get(Yn, '[', i, ',', j ,']') / 2 ^ j
)
for(j in seq_len(n))
for(i in seq_len(2^n))
assign(
paste0(Yn, '[', i, ',', j ,']'),
get(paste0(Yn, '[', i, ',', j ,']')) / 2 ^ j
)
Y3
Y3[1,1]
get(paste0(Yn,'[1,1]'))
get('Y3[1,1]'))
get('Y3[1,1]')
get(Y3)
get(Yn)
get(Yn)[1,1]
for(j in seq_len(n))
for(i in seq_len(2^n))
assign(
paste0(Yn, '[', i, ',', j ,']'),
get(Yn)[i,j] / 2 ^ j
)
Yn
get(Yn)
Yn[1,1]
Y3[1,1]
assign(get(Yn)[1,1], 6)
get(Yn)[1,1]
assign("Y3[1,1]", 5)
Y3
Y3[1,1]
assign("Yn[1,1]", 5)
Y3
assign(Y3[1,1], 5)
Y3[1,1] <- 5
Y3
# clear workspace
rm(list = ls())
gc()
n <- 3
l <- rep(list(0:1), n)
Yn <-  expand.grid(l)
for(j in seq_len(n))
for(i in seq_len(2^n))
Yn[i,j] <- Yn[i,j] / 2 ^ j
X <- rowSums(Yn)
X[order(X)]
n <- 20
l <- rep(list(0:1), n)
l <- rep(list(0:1), n)
Yn <-  expand.grid(l)
for(j in seq_len(n))
for(i in seq_len(2^n))
Yn[i,j] <- Yn[i,j] / 2 ^ j
yn[1,2]
Yn[1,2]
seqn <- seq_len(n)
seq2n <- seq_len(n^2)
rm(list = ls())
gc()
n <- 20
l <- rep(list(0:1), n)
Yn <-  expand.grid(l)
seqn <- seq_len(n)
seq2n <- seq_len(n^2)
for(j in seqn)
for(i in seq2n)
Yn[i,j] <- Yn[i,j] / 2 ^ j
X <- rowSums(Yn)
X[order(X)]
X
n <- 5
l <- rep(list(0:1), n)
Yn <-  expand.grid(l)
seqn <- seq_len(n)
seq2n <- seq_len(n^2)
for(j in seqn)
for(i in seq2n)
Yn[i,j] <- Yn[i,j] / 2 ^ j
X <- rowSums(Yn)
X[order(X)]
n <- 3
l <- rep(list(0:1), n)
Yn <-  expand.grid(l)
seqn <- seq_len(n)
seq2n <- seq_len(n^2)
for(j in seqn)
for(i in seq2n)
Yn[i,j] <- Yn[i,j] / 2 ^ j
X <- rowSums(Yn)
X[order(X)]
# clear workspace
rm(list = ls())
gc()
n <- 20
l <- rep(list(0:1), n)
Yn <-  expand.grid(l)
Yn[nrow(Yn)]
Yn[nrow(Yn), ]
Yn[1, ]
n <- 3
l <- rep(list(0:1), n)
Yn <-  expand.grid(l)
seqn <- seq_len(n)
seq2n <- seq_len(n^2)
for(j in seqn)
for(i in seq2n)
Yn[i,j] <- Yn[i,j] / 2 ^ j
X <- rowSums(Yn)
X[order(X)]
n <- 3
Yn <- paste0('Y', n)
l <- rep(list(0:1), n)
assign(Yn,
expand.grid(l))
for(j in seq_len(n))
for(i in seq_len(2^n))
Y3[i,j] <- Y3[i,j] / 2 ^ j
X <- rowSums(get(Yn))
X[order(X)]
Yn <- expand.grid(l)
for(j in seq_len(n))
for(i in seq_len(2^n))
Yn[i,j] <- Yn[i,j] / 2 ^ j
X <- rowSums(get(Yn))
X <- rowSums(Yn)
X[order(X)]
seqn <- seq_len(n)
seq2n <- seq_len(2^n)
for(j in seqn)
for(i in seq2n)
Yn[i,j] <- Yn[i,j] / 2 ^ j
X <- rowSums(Yn)
X[order(X)]
seqn
seq2n
for(j in seqn)
for(i in seq2n)
Yn[i,j] <- Yn[i,j] / 2 ^ j
X <- rowSums(Yn)
X[order(X)]
n <- 3
Yn <- paste0('Y', n)
l <- rep(list(0:1), n)
Yn <- expand.grid(l)
seqn <- seq_len(n)
seq2n <- seq_len(2^n)
for(j in seqn)
for(i in seq2n)
Yn[i,j] <- Yn[i,j] / 2 ^ j
X <- rowSums(Yn)
X[order(X)]
n <- 5
Yn <- paste0('Y', n)
l <- rep(list(0:1), n)
Yn <- expand.grid(l)
seqn <- seq_len(n)
seq2n <- seq_len(2^n)
for(j in seqn)
for(i in seq2n)
Yn[i,j] <- Yn[i,j] / 2 ^ j
X <- rowSums(Yn)
X[order(X)]
n <- 10
Yn <- paste0('Y', n)
l <- rep(list(0:1), n)
Yn <- expand.grid(l)
seqn <- seq_len(n)
seq2n <- seq_len(2^n)
for(j in seqn)
for(i in seq2n)
Yn[i,j] <- Yn[i,j] / 2 ^ j
X <- rowSums(Yn)
X[order(X)]
n <- 20
Yn <- paste0('Y', n)
l <- rep(list(0:1), n)
Yn <- expand.grid(l)
seqn <- seq_len(n)
seq2n <- seq_len(2^n)
for(j in seqn)
for(i in seq2n)
Yn[i,j] <- Yn[i,j] / 2 ^ j
n <- 15
Yn <- paste0('Y', n)
# clear workspace
rm(list = ls())
gc()
gc()
n <- 15
Yn <- paste0('Y', n)
l <- rep(list(0:1), n)
Yn <- expand.grid(l)
seqn <- seq_len(n)
seq2n <- seq_len(2^n)
for(j in seqn)
for(i in seq2n)
Yn[i,j] <- Yn[i,j] / 2 ^ j
X <- rowSums(Yn)
X[order(X)]
length(X)
x[length(X)]
X[length(X)]
X[1]
hist(X)
runif(100)
?runif
rep(1:4, n)
test <- rep.int(1:4, n)
rep.int(1:4, n)
?rep
(m/2^n) - (k/2^n)
m <- 3000
k <- 10
(m/2^n) - (k/2^n)
X[X < (m/2^n) && X > (k/2^n)]
X < (m/2^n) && X > (k/2^n)
(m/2^n)
X[order(X)]
(m/2^n) - (k/2^n)
(k/2^n)
(m/2^n)
X[X < (m/2^n) && X > (k/2^n)]
X
X < (m/2^n)
X > (k/2^n)
X > (k/2^n)
X[X < (m/2^n) && X > (k/2^n)]
(k/2^n)
X[X < (m/2^n) & X > (k/2^n)]
sum(X[X < (m/2^n) & X > (k/2^n)])
(m/2^n) - (k/2^n)
mean(X[X < (m/2^n) & X > (k/2^n)])
mean(X[X < (m/2^n) & X > (k/2^n)]) *2
lenght(X[X < (m/2^n) & X > (k/2^n)]) / lenght(X)
length(X[X < (m/2^n) & X > (k/2^n)]) / length(X)
(m/2^n) - (k/2^n)
length(X[X < (m/2^n) & X > (k/2^n)]) / length(X)
n <- 15
l <- rep(list(0:1), n)
Yn <- expand.grid(l)
seqn <- seq_len(n)
seq2n <- seq_len(2^n)
for(j in seqn)
for(i in seq2n)
Yn[i,j] <- Yn[i,j] / 2 ^ j
X <- rowSums(Yn)
X[order(X)]
m <- 3000
k <- 10
(m/2^n) - (k/2^n)
length(X[X < (m/2^n) & X > (k/2^n)]) / length(X)
?normal
?distribution
plot(qnorm)
plot(dnorm)
plot(pnorm)
plot(qnorm)
square_inverse = inverse(function (x) x^2, 0.1, 100)
?uniroot
inverse
?inverse
install.packages("GoFKernel")
library(GoFKernel)
?inverse
?distribution
plot(function(x) pnorm(x, log.p = TRUE), -50, 10,
main = "log { Normal Cumulative }")
plot(function(x) pnorm(x, log.p = TRUE), -50, 100,
main = "log { Normal Cumulative }")
plot(pnorm())
plot(pnorm(c(-5,5)))
plot(pnorm(seq(c(-5,5))))
?seq
a <- seq(from = -5, to = 5, by = 0.1)
pnorm(a)
plot(pnrom(a))
plot(pnorm(a))
plot(a, pnorm(a))
plot(a, inverse(pnorm(a))
)
?inverse
?cdf
f <- pnorma(a)
f <- pnorm(a)
inverse(f)
f
f <- function(x) {pnorm(x)}
inverse(f)
g <- inverse(f)
plot(a, inverse(g(a)))
plot(a, g(a))
g(4)
g1
g(1)
g100
g(100)
g(a)
a
g(c(1,3))
library(ggplot2)
rm(list = ls())
gc()
options("scipen" = 999)
options(digits = 7)
# Load libraries
library(ggplot2)
# clear workspace
rm(list = ls())
gc()
p <- 1/2
q <- 1 - p
size <- 300
spread <- 3000
M <- 0
Mt <- fi <- data.frame(matrix(rep(0, (size + 1)^2), nrow = size + 1))
head(Mt)
str(Mt)
l <- 300
k <- 200
X <- sample(x = c(-1, 1),
size = size,
replace = T,
prob = c(p, q)
)
for(i in 1:size)
M[i + 1] <- sum(X[1:i]) # i + 1 because M[0] from theory is indeed represented by M[1] in this code.
