tail(y)
tail(y)
head(str(y))
y[[1]]
y[[6]]
y[[2999]]
y[[99999]]
n <- 1:3000
y = list()
for(i in n){
y[[i]] <- rbinom(n = 1000,
size = 1,
prob = p)
}
head(str(y))
Y = list()
for(i in n){
Y[[i]] <- rbinom(n = 1000,
size = 1,
prob = p)
}
x <- vector()
x
x[1] <- toto
x[1] <- 'toto'
x
YPrime <- list()
YPrime <- list()
for(i in n)
for(j in 1:1000)
YPrime[[i]][j] <- Y[[i]][j] / 2^j
YPrime <- y
for(i in n)
for(j in 1:1000)
YPrime[[i]][j] <- Y[[i]][j] / 2^j
x <- vector()
x <- vector()
for(i in n)
x[i] <- sum(YPrime[[i]])
x
y[[2]]
head(y[[2]])
head(x)
head(y[[1]])
y[[2]][1]
head(YPrime)
head(YPrime[[2]])
head(Y[[2]])
head(X[[2]])
head(X[2])
head(X[2])
x
head(x[2])
head(y[[2]])
head(Y[[2]])
head(Y[[996]])
mean(Y[[996]])
X <- vector()
for(i in n)
X[i] <- sum(YPrime[[i]])
n[last]
n[length(n)]
ProbX <- 1 / 2 ^ n[length(n)]
ProbX
1/2^3000
?install.packages
install.packages()
install.package
install.packages("Rmpfr")
library(Rmpfr)
mpfr(ProbX)
?mpfr
mpfr(ProbX, 53)
mpfr(1/2^3000,53)
mpfr(1/2^3000,100)
ProbX <- 1 / 2 ^ n[length(n)]
ProbX
1/9999999999999999
1/99999999999999999999999999999999999999999999999
1/99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999
2^3000
2^3000 * 2000
1/2^3000 * 2000
1/2^30 * 2000
1/2^30
1/2^300
W <- seq(from = 0,
to = 1,
by = .0001)
mean(W)
punif(W)[length(W) / 2]
length(n)
n <- 1:3000
Y = list()
for(i in n){
Y[[i]] <- rbinom(n = s,
size = 1,
prob = p)
}
s <- 1000
Y = list()
for(i in n){
Y[[i]] <- rbinom(n = s,
size = 1,
prob = p)
}
YPrime <- y
for(i in n)
for(j in 1:1000)
YPrime[[i]][j] <- Y[[i]][j] / 2^j
n <- 1:30
Y = list()
for(i in n){
Y[[i]] <- rbinom(n = s,
size = 1,
prob = p)
}
YPrime <- y
for(i in n)
for(j in 1:n)
YPrime[[i]][j] <- Y[[i]][j] / 2^j
warnings()
YPrime <- y
for(i in n)
for(j in 1:s)
YPrime[[i]][j] <- Y[[i]][j] / 2^j
X <- vector()
for(i in n)
X[i] <- sum(YPrime[[i]])
X
ProbX <- 1 / 2 ^ n[length(n)]
ProbX
2^30
#################################################################
# Example 1.2.5: Another random variable uniformly distributed.
################################################################
# W random variables included various value from 0 to one.
# All UNIFORMALY distributed.
W <- seq(from = 0,
to = 1,
by = .0001)
# Expected value of random variable W:
# n^-1 * sum(wi) or mean():
mean(W)
# using UNIFORM distribution.
punif(W)[length(W) / 2]
#
# Define the probability measure p & q
p <- 1/2
q <- 1 - p
# number of exeriments: length(n)
n <- 1:2
# Sample size:
s <- 1000
#
# Y should be constructed according to some random experiment.
Y = list()
for(i in n){
Y[[i]] <- rbinom(n = s,
size = 1,
prob = p)
}
# According to Y, construction of X:
# X should be a random variable construct upon a vector
# Transformation of Y
YPrime <- y
for(i in n)
for(j in 1:s)
YPrime[[i]][j] <- Y[[i]][j] / 2^j
X <- vector()
for(i in n)
X[i] <- sum(YPrime[[i]])
# Probability that the value of X fall between 4/3000 and 5/3000:
ProbX <- 1 / 2 ^ n[length(n)]
ProbX
2^1000
# number of exeriments: length(n)
n <- 1:100000
# Sample size:
s <- 100
Y = list()
for(i in n){
Y[[i]] <- rbinom(n = s,
size = 1,
prob = p)
}
YPrime <- y
for(i in n)
for(j in 1:s)
YPrime[[i]][j] <- Y[[i]][j] / 2^j
y[[1]]
y[[2]]
y[[100000]]
Y[[100000]]
YPrime <- Y
for(i in n)
for(j in 1:s)
YPrime[[i]][j] <- Y[[i]][j] / 2^j
X <- vector()
for(i in n)
X[i] <- sum(YPrime[[i]])
ProbX <- 1 / 2 ^ s
ProbX
mean(X[X >= (1/2^100) & X <= (2/2^100)])
X[X >= (1/2^100) & X <= (2/2^100)]
X[1]
X[X == 0.699192]
X[X = 0.699192]
X[X > 0.68]
X[X >= (1/2^100)]
X[X >= (1/2^100) & X <= (2/2^100)]
expe <- 1:100000
expe <- 100000
n <- 100
expe <- 100000
n <- 100
Y = list()
for(i in 1:expe){
Y[[i]] <- rbinom(n = n,
size = 1,
prob = p)
}
YPrime <- Y
for(i in 1:expe)
for(j in 1:n)
YPrime[[i]][j] <- Y[[i]][j] / 2^j
X <- vector()
for(i in 1:expe)
X[i] <- sum(YPrime[[i]])
ProbX <- 1 / 2 ^ n
ProbX
2^100
2/2^100
300000/2^100
300000000000000000/2^100
300000000000000000000000000000000/2^100
300000000000000000000000000000/2^100
k <- 300000000000000000000000000000/2^100
X[X < k]
300000000000000000000000000000/2^100
3e20
3e20 / 1^100
3e20 / 2^100
3e30 / 2^100
3e29 / 2^100
(3e29 - 0)/2^n
length(X)
length(X[X < 3e29/2^n]) / length(X)
probI <- (3e29 - 3e15)/2^n
probI
probI <- (3e29 - 3e15)/2^n
probI
(3e29 - 3e15)/2^n
(3e29 - 3e15)
3e28
3e29 - 3e28
(3e29 - 3e28)/2^n
probI <- (3e29 - 3e28)/2^n
probI
length(X[x<3e28/2^n & X < 3e29/2^n]) / length(X)
X[x<3e28/2^n & X < 3e29/2^n]
length(X)
length(X[x > 3e28/2^n & X < 3e29/2^n])
length(X[x > 3e28/2^n && X < 3e29/2^n])
length(X[x > 3e28/2^n & X < 3e29/2^n])
length(X[X > 3e28/2^n & X < 3e29/2^n])
length(X[X > 3e28/2^n & X < 3e29/2^n]) / length(X)
probI
?binom
?binomial
?base::binomial
??binom
rbinom(n = 300, size = 1, prob = 0.5)
rbinom(n = 300, size = c(-1,1), prob = 0.5)
?seq
?random
?rand
?Uniform
?sample
sample(x = c(-1, 0), replace = T, prob = 0.5, size = 300)
sample(x = c(-1, 0), replace = T, prob = c(0.5, 0.5), size = 300)
p <- 1/2
q <- 1 - p
X <- sample(x = c(-1, 1),
replace = T,
prob = c(p, q),
size = 300)
size <- 300
X
sum(X)
X[1:4]
for(i in 1:size)
M[i] <- sum(X[1:i])
M <- X[0]
for(i in 1:size)
M[i] <- sum(X[1:i])
M
plot(M)
plot(M, line)
?plot
plot(M, type = 'l')
p <- 1/2
q <- 1 - p
size <- 300
X <- sample(x = c(-1, 1),
replace = T,
prob = c(p, q),
size = size)
M <- X[0]
for(i in 1:size)
M[i] <- sum(X[1:i])
png(filename = 'SymmetricRandomWalk.png')
plot(M,
type = 'l')
dev.off()
Xs <- data.frame()
for(i in 1:spread)
Xs[i, ] <- sample(x = c(-1, 1),
replace = T,
prob = c(p, q),
size = size)
spread <- 3000
for(i in 1:spread)
Xs[i, ] <- sample(x = c(-1, 1),
replace = T,
prob = c(p, q),
size = size)
warings()
warnings()
Xs
?data.frame
Xs <- list()
for(i in 1:spread)
Xs[[i]] <- sample(x = c(-1, 1),
replace = T,
prob = c(p, q),
size = size)
p <- 1/2
q <- 1 - p
size <- 300  # Because M[1] will in fact be M[0] = 0
spread <- 3000
X <- sample(x = c(-1, 1),
replace = T,
prob = c(p, q),
size = size)
M <- 0
for(i in 1:size)
M[i + 1] <- sum(X[1:i]) # i + 1 because M[0] from theory is indeed represented by M[1] in this code.
##
# Check by plot
##
png(filename = 'SymmetricRandomWalk.png')
plot(M,
type = 'l')
dev.off()
list(1:5, 1:3)
as.data.frame(list(1:5, 1:3))
Mt <- data.frame(F0 = 0)
rep(0,100)
rep(c(1,2), 100)
rep(0, (size + 1)^2)
length(rep(0, (size + 1)^2))
?data.frame
data.frame(rep(0, (size + 1)^2))
data.frame(rep(0, (size + 1)^2), dim(c(size + 1, size + 1)))
df <- data.frame(rep(0, (size + 1)^2))
df
df <- data.frame(rep(0, (size + 1)^2))
dim(df)
dim(df) <- c(301, 301)
301 * 301
dim(df) <- c(300, 300)
length(df)
df <- data.frame()
dim(df)
dim(df) <- c(306, 306)
Mt <- data.frame(matrix(rep(0, (size + 1)^2), nrow = size + 1))
str(Mt)
head(Mt)
for(i in 1:size)
for(j in 0:i - 1)
Mt[j] <- i - 2*j
for(i in 1:size)
for(j in 0:i - 1)
Mt[i,j] <- i - 2*j
for(i in 1:size)
for(j in 0:(i - 1))
Mt[i,j] <- i - 2*j
Mt <- data.frame(matrix(rep(0, (size + 1)^2), nrow = size + 1))
for(i in 1:size)
for(j in 0:(i - 1))
Mt[i,j] <- i - 2*j
for(i in 1:size)
for(j in 0:(i - 1))
'tot'
for(i in 1:size)
for(j in 0:(i - 1))
Mt[i,j+1] <- i - 2*j
head(Mt)
head(Mt[,1])
head(Mt[1,1])
head(Mt[2,2])
Mt[0,0]
Mt[1,1]
for(i in 1:size)
for(j in 0:(i - 1))
Mt[i,j+1] <- (i - 1) - 2*j
Mt[1.1]
Mt[1,1]
Mt[1,1:10]
Mt[1:10,1:10]
for(i in 1:size)
for(j in 0:(i - 1))
Mt[j+1,i] <- (i - 1) - 2*j
Mt[1:10,1:10]
Mt <- data.frame(matrix(rep(0, (size + 1)^2), nrow = size + 1))
for(i in 1:size)
for(j in 0:(i - 1))
Mt[j+1,i] <- (i - 1) - 2*j
Mt[1:10,1:10]
Mt[1:20,1:20]
fi <- data.frame(matrix(rep(0, (size + 1)^2), nrow = size + 1))
factorial(3)
fi <- data.frame(matrix(rep(0, (size + 1)^2), nrow = size + 1))
for(j in 1:size)
for(i in 1:j)
fi[i, j] <- ((j-1)*p^(j-1))/(factorial(j-1)*factorial(1+i))
warnings()
factorial(0)
for(j in 1:size)
for(i in 1:j)
fi[i, j] <- 0#((j-1)*p^(j-1))/(factorial(j-1)*factorial(1+i))
fi <- data.frame(matrix(rep(0, (size + 1)^2), nrow = size + 1))
for(j in 1:size)
for(i in 1:j)
fi[i, j] <- ((j-1)*p^(j-1))#/(factorial(j-1)*factorial(1+i))
fi <- data.frame(matrix(rep(0, (size + 1)^2), nrow = size + 1))
for(j in 1:size)
for(i in 1:j)
fi[i, j] <- ((j-1)*p^(j-1))/(factorial(j-1))#*factorial(1+i))
for(j in 1:20)
for(i in 1:j)
fi[i, j] <- paste(i, j, sep = ',')
fi[1:20, 1:20]
fi[1:20, 1:20]
fi <- data.frame(matrix(rep(0, (size + 1)^2), nrow = size + 1))
for(j in 1:size)
for(i in 1:j)
fi[i, j] <- factorial(j-1) #((j-1)*p^(j-1))/(factorial(j-1)*factorial(1+i))
for(j in 1:20)
for(i in 1:j)
fi[i, j] <- factorial(j-1) #((j-1)*p^(j-1))/(factorial(j-1)*factorial(1+i))
fi <- data.frame(matrix(rep(0, (size + 1)^2), nrow = size + 1))
for(j in 1:20)
for(i in 1:j)
fi[i, j] <- ((j-1)*p^(j-1))/(factorial(j-1)*factorial(1+i))
fi[1:20, 1:20]
fi[1:20, 1:20]
fi <- data.frame(matrix(rep(0, (size + 1)^2), nrow = size + 1))
for(j in 1:size-1)
for(i in 1:j)
fi[i, j] <- ((j-1)*p^(j-1))/(factorial(j-1)*factorial(1+i))
for(j in 1:(size-1)
for(i in 1:j)
fi[i, j] <- ((j-1)*p^(j-1))/(factorial(j-1)*factorial(1+i))
for(j in 1:(size-1))
for(i in 1:j)
fi[i, j] <- ((j-1)*p^(j-1))/(factorial(j-1)*factorial(1+i))
for(j in 1:(size-100))
for(i in 1:j)
fi[i, j] <- ((j-1)*p^(j-1))/(factorial(j-1)*factorial(1+i))
for(j in 1:(size-280))
for(i in 1:j)
fi[i, j] <- ((j-1)*p^(j-1))/(factorial(j-1)*factorial(1+i))
for(j in 1:(size-200))
for(i in 1:j)
fi[i, j] <- ((j-1)*p^(j-1))/(factorial(j-1)*factorial(1+i))
for(j in 1:(size-150))
for(i in 1:j)
fi[i, j] <- ((j-1)*p^(j-1))/(factorial(j-1)*factorial(1+i))
for(j in 1:(size-180))
for(i in 1:j)
fi[i, j] <- ((j-1)*p^(j-1))/(factorial(j-1)*factorial(1+i))
for(j in 1:(size-100))
for(i in 1:j)
fi[i, j] <- ((j-1)*p^(j-1))/(factorial(j-1)*factorial(1+i))
for(j in 1:(size-120))
for(i in 1:j)
fi[i, j] <- ((j-1)*p^(j-1))/(factorial(j-1)*factorial(1+i))
for(j in 1:(size-130))
for(i in 1:j)
fi[i, j] <- ((j-1)*p^(j-1))/(factorial(j-1)*factorial(1+i))
for(j in 1:(size-140))
for(i in 1:j)
fi[i, j] <- ((j-1)*p^(j-1))/(factorial(j-1)*factorial(1+i))
for(j in 1:(size-135))
for(i in 1:j)
fi[i, j] <- ((j-1)*p^(j-1))/(factorial(j-1)*factorial(1+i))
for(j in 1:(size-139))
for(i in 1:j)
fi[i, j] <- ((j-1)*p^(j-1))/(factorial(j-1)*factorial(1+i))
for(j in 1:(size-131))
for(i in 1:j)
fi[i, j] <- ((j-1)*p^(j-1))/(factorial(j-1)*factorial(1+i))
for(j in 1:(size-130))
for(i in 1:j)
fi[i, j] <- ((j-1)*p^(j-1))/(factorial(j-1)*factorial(1+i))
size-130
for(i in 1:170)
fi[i, j] <- ((j-1)*p^(j-1))/(factorial(j-1)*factorial(1+i))
for(i in 1:169)
fi[i, j] <- ((j-1)*p^(j-1))/(factorial(j-1)*factorial(1+i))
