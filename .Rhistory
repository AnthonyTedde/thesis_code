sum(X)
X[order(X)]
?assign
n <- 3
Yn <- paste0('Y', n)
l <- rep(list(0:1), n)
assign(Yn,
expand.grid(l))
paste0(c(Yn, '[', i, ',', j ,']'))
paste0(Yn, '[', i, ',', j ,']')
for(j in seq_len(n))
for(i in seq_len(2^n))
assign(
paste0(Yn, '[', i, ',', j ,']'),
get(Yn, '[', i, ',', j ,']') / 2 ^ j
)
for(j in seq_len(n))
for(i in seq_len(2^n))
assign(
paste0(Yn, '[', i, ',', j ,']'),
get(paste0(Yn, '[', i, ',', j ,']')) / 2 ^ j
)
Y3
Y3[1,1]
get(paste0(Yn,'[1,1]'))
get('Y3[1,1]'))
get('Y3[1,1]')
get(Y3)
get(Yn)
get(Yn)[1,1]
for(j in seq_len(n))
for(i in seq_len(2^n))
assign(
paste0(Yn, '[', i, ',', j ,']'),
get(Yn)[i,j] / 2 ^ j
)
Yn
get(Yn)
Yn[1,1]
Y3[1,1]
assign(get(Yn)[1,1], 6)
get(Yn)[1,1]
assign("Y3[1,1]", 5)
Y3
Y3[1,1]
assign("Yn[1,1]", 5)
Y3
assign(Y3[1,1], 5)
Y3[1,1] <- 5
Y3
# clear workspace
rm(list = ls())
gc()
n <- 3
l <- rep(list(0:1), n)
Yn <-  expand.grid(l)
for(j in seq_len(n))
for(i in seq_len(2^n))
Yn[i,j] <- Yn[i,j] / 2 ^ j
X <- rowSums(Yn)
X[order(X)]
n <- 20
l <- rep(list(0:1), n)
l <- rep(list(0:1), n)
Yn <-  expand.grid(l)
for(j in seq_len(n))
for(i in seq_len(2^n))
Yn[i,j] <- Yn[i,j] / 2 ^ j
yn[1,2]
Yn[1,2]
seqn <- seq_len(n)
seq2n <- seq_len(n^2)
rm(list = ls())
gc()
n <- 20
l <- rep(list(0:1), n)
Yn <-  expand.grid(l)
seqn <- seq_len(n)
seq2n <- seq_len(n^2)
for(j in seqn)
for(i in seq2n)
Yn[i,j] <- Yn[i,j] / 2 ^ j
X <- rowSums(Yn)
X[order(X)]
X
n <- 5
l <- rep(list(0:1), n)
Yn <-  expand.grid(l)
seqn <- seq_len(n)
seq2n <- seq_len(n^2)
for(j in seqn)
for(i in seq2n)
Yn[i,j] <- Yn[i,j] / 2 ^ j
X <- rowSums(Yn)
X[order(X)]
n <- 3
l <- rep(list(0:1), n)
Yn <-  expand.grid(l)
seqn <- seq_len(n)
seq2n <- seq_len(n^2)
for(j in seqn)
for(i in seq2n)
Yn[i,j] <- Yn[i,j] / 2 ^ j
X <- rowSums(Yn)
X[order(X)]
# clear workspace
rm(list = ls())
gc()
n <- 20
l <- rep(list(0:1), n)
Yn <-  expand.grid(l)
Yn[nrow(Yn)]
Yn[nrow(Yn), ]
Yn[1, ]
n <- 3
l <- rep(list(0:1), n)
Yn <-  expand.grid(l)
seqn <- seq_len(n)
seq2n <- seq_len(n^2)
for(j in seqn)
for(i in seq2n)
Yn[i,j] <- Yn[i,j] / 2 ^ j
X <- rowSums(Yn)
X[order(X)]
n <- 3
Yn <- paste0('Y', n)
l <- rep(list(0:1), n)
assign(Yn,
expand.grid(l))
for(j in seq_len(n))
for(i in seq_len(2^n))
Y3[i,j] <- Y3[i,j] / 2 ^ j
X <- rowSums(get(Yn))
X[order(X)]
Yn <- expand.grid(l)
for(j in seq_len(n))
for(i in seq_len(2^n))
Yn[i,j] <- Yn[i,j] / 2 ^ j
X <- rowSums(get(Yn))
X <- rowSums(Yn)
X[order(X)]
seqn <- seq_len(n)
seq2n <- seq_len(2^n)
for(j in seqn)
for(i in seq2n)
Yn[i,j] <- Yn[i,j] / 2 ^ j
X <- rowSums(Yn)
X[order(X)]
seqn
seq2n
for(j in seqn)
for(i in seq2n)
Yn[i,j] <- Yn[i,j] / 2 ^ j
X <- rowSums(Yn)
X[order(X)]
n <- 3
Yn <- paste0('Y', n)
l <- rep(list(0:1), n)
Yn <- expand.grid(l)
seqn <- seq_len(n)
seq2n <- seq_len(2^n)
for(j in seqn)
for(i in seq2n)
Yn[i,j] <- Yn[i,j] / 2 ^ j
X <- rowSums(Yn)
X[order(X)]
n <- 5
Yn <- paste0('Y', n)
l <- rep(list(0:1), n)
Yn <- expand.grid(l)
seqn <- seq_len(n)
seq2n <- seq_len(2^n)
for(j in seqn)
for(i in seq2n)
Yn[i,j] <- Yn[i,j] / 2 ^ j
X <- rowSums(Yn)
X[order(X)]
n <- 10
Yn <- paste0('Y', n)
l <- rep(list(0:1), n)
Yn <- expand.grid(l)
seqn <- seq_len(n)
seq2n <- seq_len(2^n)
for(j in seqn)
for(i in seq2n)
Yn[i,j] <- Yn[i,j] / 2 ^ j
X <- rowSums(Yn)
X[order(X)]
n <- 20
Yn <- paste0('Y', n)
l <- rep(list(0:1), n)
Yn <- expand.grid(l)
seqn <- seq_len(n)
seq2n <- seq_len(2^n)
for(j in seqn)
for(i in seq2n)
Yn[i,j] <- Yn[i,j] / 2 ^ j
n <- 15
Yn <- paste0('Y', n)
# clear workspace
rm(list = ls())
gc()
gc()
n <- 15
Yn <- paste0('Y', n)
l <- rep(list(0:1), n)
Yn <- expand.grid(l)
seqn <- seq_len(n)
seq2n <- seq_len(2^n)
for(j in seqn)
for(i in seq2n)
Yn[i,j] <- Yn[i,j] / 2 ^ j
X <- rowSums(Yn)
X[order(X)]
length(X)
x[length(X)]
X[length(X)]
X[1]
hist(X)
runif(100)
?runif
rep(1:4, n)
test <- rep.int(1:4, n)
rep.int(1:4, n)
?rep
(m/2^n) - (k/2^n)
m <- 3000
k <- 10
(m/2^n) - (k/2^n)
X[X < (m/2^n) && X > (k/2^n)]
X < (m/2^n) && X > (k/2^n)
(m/2^n)
X[order(X)]
(m/2^n) - (k/2^n)
(k/2^n)
(m/2^n)
X[X < (m/2^n) && X > (k/2^n)]
X
X < (m/2^n)
X > (k/2^n)
X > (k/2^n)
X[X < (m/2^n) && X > (k/2^n)]
(k/2^n)
X[X < (m/2^n) & X > (k/2^n)]
sum(X[X < (m/2^n) & X > (k/2^n)])
(m/2^n) - (k/2^n)
mean(X[X < (m/2^n) & X > (k/2^n)])
mean(X[X < (m/2^n) & X > (k/2^n)]) *2
lenght(X[X < (m/2^n) & X > (k/2^n)]) / lenght(X)
length(X[X < (m/2^n) & X > (k/2^n)]) / length(X)
(m/2^n) - (k/2^n)
length(X[X < (m/2^n) & X > (k/2^n)]) / length(X)
n <- 15
l <- rep(list(0:1), n)
Yn <- expand.grid(l)
seqn <- seq_len(n)
seq2n <- seq_len(2^n)
for(j in seqn)
for(i in seq2n)
Yn[i,j] <- Yn[i,j] / 2 ^ j
X <- rowSums(Yn)
X[order(X)]
m <- 3000
k <- 10
(m/2^n) - (k/2^n)
length(X[X < (m/2^n) & X > (k/2^n)]) / length(X)
?normal
?distribution
plot(qnorm)
plot(dnorm)
plot(pnorm)
plot(qnorm)
square_inverse = inverse(function (x) x^2, 0.1, 100)
?uniroot
inverse
?inverse
install.packages("GoFKernel")
library(GoFKernel)
?inverse
?distribution
plot(function(x) pnorm(x, log.p = TRUE), -50, 10,
main = "log { Normal Cumulative }")
plot(function(x) pnorm(x, log.p = TRUE), -50, 100,
main = "log { Normal Cumulative }")
plot(pnorm())
plot(pnorm(c(-5,5)))
plot(pnorm(seq(c(-5,5))))
?seq
a <- seq(from = -5, to = 5, by = 0.1)
pnorm(a)
plot(pnrom(a))
plot(pnorm(a))
plot(a, pnorm(a))
plot(a, inverse(pnorm(a))
)
?inverse
?cdf
f <- pnorma(a)
f <- pnorm(a)
inverse(f)
f
f <- function(x) {pnorm(x)}
inverse(f)
g <- inverse(f)
plot(a, inverse(g(a)))
plot(a, g(a))
g(4)
g1
g(1)
g100
g(100)
g(a)
a
g(c(1,3))
library(ggplot2)
rm(list = ls())
gc()
options("scipen" = 999)
options(digits = 7)
# Load libraries
library(ggplot2)
# clear workspace
rm(list = ls())
gc()
p <- 1/2
q <- 1 - p
size <- 300
spread <- 3000
M <- 0
Mt <- fi <- data.frame(matrix(rep(0, (size + 1)^2), nrow = size + 1))
head(Mt)
str(Mt)
l <- 300
k <- 200
X <- sample(x = c(-1, 1),
size = size,
replace = T,
prob = c(p, q)
)
for(i in 1:size)
M[i + 1] <- sum(X[1:i]) # i + 1 because M[0] from theory is indeed represented by M[1] in this code.
p <- 1/2
q <- 1 - p
size <- 300
Mt <- data.frame(matrix(rep(0, (size + 1)^2), nrow = size + 1))
l <- 300
k <- 200
head(str(Mt))
head(Mt)
p <- 1/2
q <- 1 - p
x[1,1]
X[1,1]
X[1]
sapply(x, FUN = sum)
p <- 1/2
q <- 1 - p
size <- 300
spread <- 3000
M <- 0
p <- 1/2
q <- 1 - p
size <- 300
spread <- 3000
M <- 0
###
# Mt and fi are dataframe with size = (size + 1) * (size + 1)
# All value inside Mt and fi are zero.
# check ate Initialisation section for size value.
###
Mt <- fi <- data.frame(matrix(rep(0, (size + 1)^2), nrow = size + 1))
l <- 300
k <- 200
p <- 1/2
q <- 1 - p
size <- 300
spread <- 3000
M <- 0
###
# Mt and fi are dataframe with size = (size + 1) * (size + 1)
# All value inside Mt and fi are zero.
# check ate Initialisation section for size value.
###
Mt <- fi <- data.frame(matrix(rep(0, (size + 1)^2), nrow = size + 1))
l <- 300
k <- 200
##
# Generation
##
X <- sample(x = c(-1, 1),
size = size,
replace = T,
prob = c(p, q)
)
sum(X)
X
sapply(X = X, FUN = sum)
sapply(X = X, FUN = sum, X)
sapply(seq_along(X), function(x){sum(X[x:length(X)])})
seq_along(X)
sapply(seq_along(X), function(x){sum(X[1:length(x)])})
sapply(seq_along(X), function(x){x})
sapply(seq_along(X), function(x){X[x]})
sapply(seq_along(X), function(x){X[1:x]})
sapply(seq_along(X), function(x){sum(X[1:x])})
M
for(i in 1:size)
M[i + 1] <- sum(X[1:i]) # i + 1 because M[0] from theory is indeed represented by M[1] in this code.
M
X
M_k <- c(0,
sapply(seq_along(X), function(x){sum(X[1:x])}))
M_k
p <- 0.5
q <- 1 - p
k <- 300
##
# Generation
##
X <- sample(x = c(-1, 1),
size = k,
replace = T,
prob = c(p, q)
)
M_k <- c(0,
sapply(seq_along(X), function(x){sum(X[1:x])}))
M_k
install.packages("xtable")
class(M_k)
M_k
:w
cat(M_k)
print(cat(M_k))
plot(M_k,
type = 'l')
as.data.frame(M_k)
head(as.data.frame(M_k))
seq_along(as.data.frame(M_k))
seq_along(M_k)
seq_along(M_k) -1
cbind(seq_along(M_k) -1, M_k)
df_Mk <- cbind(
set_along(M_k) - 1,
M_k
)
set_along(M_k)
df_Mk <- cbind(
seq_along(M_k) - 1,
M_k
)
names(df_Mk)
colnames(df_Mk)
colnames(df_Mk) <-  c('x', 'y')
colnames(df_Mk)
colnames(df_Mk)
ggplot2::ggplot(data = df_Mk, aes(x, y))
ggplot2::ggplot() +
geom_line(data = df_Mk, aes(x, y))
ggplot2::ggplot(data = df_Mk, aes(x, y)) +
geom_line()
ggplot2::ggplot(data = df_Mk, aes('x', 'y')) +
geom_line()
library(ggplot2)
ggplot2::ggplot(data = df_Mk, aes('x', 'y')) +
geom_line()
df_Mk <- as.data.frame(
cbind(
seq_along(M_k) - 1,
M_k
))
colnames(df_Mk)
colnames(df_Mk) <- c('x', 'y')
ggplot2::ggplot(data = df_Mk, aes('x', 'y')) +
geom_line()
head(df_Mk[1,])
head(df_Mk[])
ggplot2::ggplot(data = df_Mk, aes('x', 'y')) + \
geom_line()
ggplot2::ggplot(data = df_Mk, aes('x', 'y'))
+ geom_line()
ggplot2::ggplot(data = df_Mk, aes('x', 'y')) +
geom_line()
ggplot(data = df_Mk, aes('x', 'y')) +
geom_line()
library(datasets)
ggplot(mtcars, aes('wt', 'mpg')) + \
geom_line()
ggplot(mtcars, aes('wt', 'mpg')) +
geom_line()
geom_line(position = jitter)
geom_line(position = 'jitter')
ggplot(mtcars, aes('wt', 'mpg')) +
geom_line()
mtcars[, 'wt']
df_Mk[, 'x']
ggplot(mtcars, aes('wt', 'mpg')) + geom_line()
ggplot(mtcars, aes('wt', 'mpg'))
ggplot(mtcars, aes('wt', 'mpg'))+ geom_line()
ggplot(mtcars, aes('wt', 'mpg'))+ geom_point()
ggplot(mtcars, aes('wt', 'mpg'))+ geom_point()
library(ggplot2)
ggplot(mtcars, aes('wt', 'mpg')) + geom_line()
ggplot(mtcars, aes('wt', 'mpg')) + geom_point()
p = ggplot(mtcars, aes('wt', 'mpg')) + geom_point()
p.show()
print ggplot(mtcars, aes('wt', 'mpg')) + geom_point()
print(ggplot(mtcars, aes('wt', 'mpg')) + geom_point())
library(ggplot2)
install.packages("installr")
library(installr)
updateR()
ggplot(mtcars, aes('wt', 'mpg')) + geom_point()
