?seq
domain <- seq(from = 0,
to = 1,
by = 0.000001)
domain
head(domain)
?head
tail(domain)
length(domain)
?Uniform
punif(domain)
plot(punif(domain))
plot(punif(domain))
quit
plot(1:5)
quit
quit
quit
?plot
plot(1:5)
plot(punif(1:60))
plot(punif(domain))
punif(1:5)
punif(1:75)
punif(555)
plot(punif(0:400))
punif(0)
dunif(0:400)
dunif(3)
?dunif
vectorOfQuantile <- seq(from = 0,
to = 1,
by = .25)
vectorOfQuantile
punif(q = vectorOfQuantile,
min = 0,
max = 1)
dunif(x = vectorOfQuantile)
dunif(x = 1:5)
dunif(x = vectorOfQuantile)
domain <- seq(from = 0,
to = 1,
by = 0.01)
plot(punif(domain))
plot(dunif(domain))
domain
punif(domain)
plot(domain, punif(domain))
plot(domain, dunif(domain))
plot(domain, punif(domain))
?plot
plot(x = domain,
y = punif(domain),
type = 'l')
plot(x = domain,
y = punif(domain),
type = 'l')
plot(domain, dunif(domain))
mux <- .8 - .4
punif(x = .8) - punif(x = .4)
punif(x = .8)
punif(.8) - punif(.4)
mux
dt <- 0.4 * 0.8
leftHandBound <- dunif(0.4)
integral <- df * leftHandBound
leftHandBound
dt
dt <- 0.4 * 0.8
leftHandBound <- dunif(0.4)
integral <- df * leftHandBound
typeof(leftHandBound)
typeof(dt)
dt
dt + 1
dt * 1
dt
dt <- 0.8 - 0.4
integral <- dt * leftHandBound
integral
W <- seq(from = 0,
to = 1,
by = .0001)
mean(w)
mean(W)
?mean
hean(W)
head(W)
?Uniform
head(dunif(W))
punif(dunif(W))
dunif(W)
punif(W)
length(W)
punif(W)[length(W) / 2]
length(W)
length(W)/2
0.5* (punif(W)[floor(length(W) / 2)] + punif(W)[ceiling(length(W) / 2)])
punif(W)[ceiling(length(W) / 2)
]
(punif(W)[floor(length(W) / 2)]
]
(punif(W)[floor(length(W) / 2)])
punif(W)[lenght(W) / 2]
punif(W)[length(W) / 2]
p <- 1/2
q <- 1 - p
?binom
?binomial
?binom.test
?dbinom
rbinom(2,100)
rbinom(2,100, 0.5)
rbinom(1000,2, 0.5)
rbinom(1000,1, 0.5)
y = list()
rbinom(1000,1, 0.5)
y
y[[1]] <- 1:3
y
y[1]
y[[1]]
y[1] <- 1:5
y
str(y)
y = list()
y[[1]] <- rbinom(n = 1000,
size = 1,
prob = p)
y
str(y)
?for
fkjlsd
?loop
??loop
y = list()
n <- 3000
for(i in n)
y[[i]] <- rbinom(n = 1000,
size = 1,
prob = p)
str(y)
head(y)
rbinom(n = 1000, size = 1, prob = p)
rbinom(n = 1000, size = 1, prob = p)
tail(y)
tail(y)
head(str(y))
y[[1]]
y[[6]]
y[[2999]]
y[[99999]]
n <- 1:3000
y = list()
for(i in n){
y[[i]] <- rbinom(n = 1000,
size = 1,
prob = p)
}
head(str(y))
Y = list()
for(i in n){
Y[[i]] <- rbinom(n = 1000,
size = 1,
prob = p)
}
x <- vector()
x
x[1] <- toto
x[1] <- 'toto'
x
YPrime <- list()
YPrime <- list()
for(i in n)
for(j in 1:1000)
YPrime[[i]][j] <- Y[[i]][j] / 2^j
YPrime <- y
for(i in n)
for(j in 1:1000)
YPrime[[i]][j] <- Y[[i]][j] / 2^j
x <- vector()
x <- vector()
for(i in n)
x[i] <- sum(YPrime[[i]])
x
y[[2]]
head(y[[2]])
head(x)
head(y[[1]])
y[[2]][1]
head(YPrime)
head(YPrime[[2]])
head(Y[[2]])
head(X[[2]])
head(X[2])
head(X[2])
x
head(x[2])
head(y[[2]])
head(Y[[2]])
head(Y[[996]])
mean(Y[[996]])
X <- vector()
for(i in n)
X[i] <- sum(YPrime[[i]])
n[last]
n[length(n)]
ProbX <- 1 / 2 ^ n[length(n)]
ProbX
1/2^3000
?install.packages
install.packages()
install.package
install.packages("Rmpfr")
library(Rmpfr)
mpfr(ProbX)
?mpfr
mpfr(ProbX, 53)
mpfr(1/2^3000,53)
mpfr(1/2^3000,100)
