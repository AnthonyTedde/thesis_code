EH3 = 1/8 * sum(H/3)
EH3
k <- 20
Y <- expand.grid(
rep(list(c(1,0)), k)
)
H <- rowSums(Y)
H
EH3 = 1/(2^k) * sum(H/k)
EH3
H/k
EH3 = 1/(2^k) * sum(H/k)
k <- 30
Y <- expand.grid(
rep(list(c(1,0)), k)
)
H <- rowSums(Y)
EH3 = 1/(2^k) * sum(H/k)
H <- rowSums(Y)
EH3 = 1/(2^k) * sum(H/k)
EH3
k <- 20
Y <- expand.grid(
rep(list(c(1,0)), k)
)
H <- rowSums(Y)
EH3 = 1/(2^k) * sum(H/k)
EH3
norm()
?norm
dnorm(c(-1, 1))
dnorm(c(-1, 1, 0))
dnorm(seq(-4,4,by = 0.01))
w <- dnorm(seq(-4,4,by = 0.01))
plot(w)
s <- seq(-4, 4, by = 0.01)
w <- dnorm(s)
cbind(s, w)
dist <- cbind(s, w)
library(ggplot2)
dist <- cbind(s, w)
ggplot(dist, aes(w, s))
dist <- as.dataframe(cbind(s, w))
dist <- as.data.frame(cbind(s, w))
ggplot(dist, aes(w, s))
ggplot(dist, aes(w, s)) + geom_line()
ggplot(dist, aes(s, w)) + geom_line()
pnorm(c(1,1))
pnorm(c(4))
pnorm(c(5))
pnorm(c(1)) - pnorm(-1)
qnrom(0.68)
qnorm(0.68)
pnrom(0)
pnorm(0)
qnorm(0.5)
integral(dnorm, -9,0)
pnorm(1) - pnorm(-1)
methods("t.test")
getS3method("t.test.default*")
getS3method("t.test.default")
getS3method("mean")
getS3method("mean", 'Date')
getS3method("mean", 'Dat')
getS3method("mean", 'Date')
a <- sturcture(list(), class = c('a', 'b'))
a <- structure(list(), class = c('a', 'b'))
class(a)
inherits(a, 'a')
inherits(a, 'b')
inherits(a, c('a', 'b'))
inherits(a, LETTERS[1:2])
inherits(a, lower(LETTERS[1:2]))
lower.tri(LETTERS)
LETTERS
lower(LETTERS)
?lower.tri
inherits(a, str_to_lower(LETTERS[1:2]))
library(stringr)
inherits(a, str_to_lower(LETTERS[1:2]))
class(glm())
f.a <- function(x) "class a"
a <- structure(list(), class = 'a')
f(a)
f.a(a)
f <- function(x) <- UseMethod("f")
f <- function(x) UseMethod("f")
f(a)
b <- structure(list(), class = "b")
f(b)
f.a(b)
formals(mean)
mean
mean.a <- function(x, ...) "a"
mean(a)
mean.a <- function() "a"
mean.a <- function() "b"
mean(a)
f.b <- function() "class b"
f(b)
f.b <- function(x) "class b"
f(b)
paste0("generic", ".", c(class(x), "default"))
paste0("generic", ".", c(class(a), "default"))
f
methods(f)
f.default <- function(x) 'Unknown class'
c <- structure(list(), class = 'c')
f(c)
f(b)
?NextMethod
seq(4, 32, by = 4)
seq(4, 32, 4)
?seq
outer(1:3, 1:3, paste(sep = ','))
outer(1:3, 1:3, paste,sep = ',')
s = 4
n = 3
outer(0:n, 0:3, paste,sep = ',')
factor <- 2
outer(0:n, 0:3, function(i, j){s * factor ^ i})
outer(0:n, 0:3, function(i, j){s * factor ^ j})
outer(0:n, 0:3, function(i, j){s * factor ^ j / (4 ^ j)})
outer(0:n, 0:3, function(i, j){s * factor ^ j / (4 ^ i)})
cpt <- function(i, j){
s * factor ^ j / (4 ^ i)
}
outer(0:n, 0:3, cpt(i,j) )
cpt <- function(i, j){
s * factor ^ j / (4 ^ i)
}
outer(0:n, 0:3, cpt(i,j) )
cpt
cpt(0:n, 0:n)
outer(0:n, 0:3, cpt )
cpt <- function(i, j){
if(i<=j){
s * factor ^ j / (4 ^ i)
}else NA
}
outer(0:n, 0:3, cpt )
cpt <- function(i, j){
ifelse(i<=j, s * factor ^ j / (4 ^ i), NA)
}
outer(0:n, 0:3, cpt )
factor <- 3
cpt <- function(i, j){
ifelse(i<=j, s * factor ^ j / (4 ^ i), NA)
}
outer(0:n, 0:n, cpt )
factor <- 3
seq(4, 32, by = 4)
cpt <- function(i, j){
ifelse(i<=j, s * factor ^ j / (factor ^ i), NA)
}
outer(0:n, 0:n, cpt )
cpt <- function(i, j){
ifelse(i<=j, s * 2 ^ j / (4 ^ i), NA)
}
outer(0:n, 0:n, cpt )
binomialAssetPrice <- function(s = 4, n = 3){
# matrix (n+1) * (n+1) due to S0
cpt <- function(i, j){
ifelse(i<=j, s * 2 ^ j / (4 ^ i), NA)
}
outer(0:n, 0:n, cpt )
}
binomialAssetPrice(5)
binomialAssetPrice(4, 3)
S <- binomialAssetPrice(4, 3)
library(ggplot2)
p <- 1/2
q <- 1 - p
figure <- paste(getwd(),'StochasticCalculusForFinanceVol2',
'Chapter3',
'figure',
sep = '/')
figure
<- 3000
as
k <- 3000
asize <- 75000
X <- sample(x = c(-1, 1),
size = k,
replace = T,
prob = c(p, q)
)
X
Mk <- c(0,
sapply(seq_along(X), function(x){sum(X[1:x])}))
Mk
Mk <- c(0,
sapply(seq_along(X), function(x){sum(X[1:x])}))
file <- paste(figure, 'EmpiricalSymmetricRandomWalkSample.pdf', sep = '/')
pdf(file = file)
plot(Mk,
type = 'l')
dev.off()
file <- paste(figure, 'EmpiricalSymmetricRandomWalkSeveral.pdf', sep = '/')
dev.off()
file <- paste(figure, 'EmpiricalSymmetricRandomWalkSeveral.pdf', sep = '/')
randomWalkGenerator <- function(step = 3000,
prob = c(0.5, 0.5),
n = 1){
X <- sample(x = c(-1, 1),
size = k,
replace = T,
prob = c(p, q)
)
Mk <- c(0,
sapply(seq_along(X), function(x){sum(X[1:x])}))
}
randomWalkGenerator()
randomWalkGenerator <- function(step = 3000,
prob = c(0.5, 0.5),
n = 1){
X <- sample(x = c(-1, 1),
size = k,
replace = T,
prob = c(p, q)
)
(Mk <- c(0,
sapply(seq_along(X), function(x){sum(X[1:x])}))
)
}
randomWalkGenerator()
lapply(1:4, sample(x = c(-1, 1), size = k, replace = T, prob = c(0.5, .5)))
rep(c(-1, 1))
rep(c(-1, 1), 5)
rep(list(-1, 1), 5)
rep(list(c(-1, 1)), 5)
n = 5
x <- rep(list(c(-1, 1)), n)
x
sample(x = x, size = k, replace = T)
lapply(x, sample , size = k, replace = T, prob = c(0.5, .5))
a <- lapply(x, sample , size = k, replace = T, prob = c(0.5, .5))
str(a)
class(a)
dataframe(a)
b <- as.data.frame(a)
str(b)
str(a)
lapply(a, function(a){sapply(seq_along(a), function(x){sum(a[1:x])})})
b <- lapply(a, function(a){sapply(seq_along(a), function(x){sum(a[1:x])})})
b
str(b)
b <- lapply(a, function(a){c(0, sapply(seq_along(a), function(x){sum(a[1:x])}))})
str(v)
str(b)
randomWalkGenerator <- function(steps = 3000,
prob = c(0.5, 0.5),
n = 1){
x <- rep(list(c(-1, 1)), n)
X <- lapply(x,
sample,
size = steps,
replace = T,
prob = prob)
(Mk <- lapply(X, function(i){
c(0,
sapply(seq_along(i),
function(x){
sum(i[1:x])
}))
})
)
(as.data.frame(Mk))
}
randomWalkGenerator()
randomWalkGenerator(n = 2)
a <- randomWalkGenerator(n = 2)
str(a)
str(randomWalkGenerator())
library(RandomWalk)
library(RandomWalk)
rv <- randomWalk()
str(rv)
library(RandomWalk)
library(StockPriceSimulator)
rand_walk <- srwalk(time_to_maturity = 4,
seed = 1,
scale = 1)
names(rwalk())
names(srwalk())
ggplot(rand_walk, aes(time_periods, random_walk_path)) +
geom_line()
library(ggplot2)
ggplot(rand_walk, aes(time_periods, random_walk_path)) +
geom_line()
rand_walk
rand_walk <- srwalk(time_to_maturity = 4,
seed = 1,
scale = 100)
ggplot(rand_walk, aes(time_periods, random_walk_path)) +
geom_line()
rand_walks <- srwalk(time_to_maturity = 4,
seed = 1,
scale = 100,
n = 100)
rand_walks <- srwalkGenerator(time_to_maturity = 4,
seed = 1,
scale = 100,
n = 100)
ggplot2::ggplot(dplyr::bind_rows(rand_walks, .id = "uid")
, ggplot2::aes(x = time_periods,
y = random_walk_path,
group = uid)) +
ggplot2::geom_line(alpha = .5) +
ggplot2::labs(title = "Random Walk paths from multiple random experiments",
caption = "Random Walks",
x = 'Time periods',
y = 'Random Walk')
ggplot2::ggplot(dplyr::bind_rows(rand_walks, .id = "uid")
, ggplot2::aes(x = time_periods,
y = random_walk_path,
group = uid)) +
ggplot2::geom_line(alpha = .5) +
ggplot2::labs(title = "Random Walk paths from multiple random experiments",
caption = "Random Walks",
x = 'Time periods',
y = 'Random Walk')
rand_walk_t <- trwalkGenerator(time_to_maturity = 4,
scale = 100)
rand_walk_t
ggplot2::ggplot(rand_walk_t, ggplot2::aes(Mt)) +
ggplot2::geom_histogram(ggplot2::aes(weight = Pr / interval), binwidth = interval) +
ggplot2::scale_x_continuous(limits = c(-7.5, 7.5)) +
ggplot2::stat_function(fun = dnorm,
color = "blue",
args = list(mean = 0,
sd = sqrt(timeT)))
interval <- (rand_walk_t$Mt[1] - rand_walk_t$Mt[length(rand_walk_t$Mt)]) /
(length(rand_walk_t$Mt) - 1)
interval
ggplot2::ggplot(rand_walk_t, ggplot2::aes(Mt)) +
ggplot2::geom_histogram(ggplot2::aes(weight = Pr / interval), binwidth = interval) +
ggplot2::scale_x_continuous(limits = c(-7.5, 7.5)) +
ggplot2::stat_function(fun = dnorm,
color = "blue",
args = list(mean = 0,
sd = sqrt(timeT)))
rand_walk_t <- trwalkGenerator(time_to_maturity = 4,
scale = 100)
interval <- (rand_walk_t$Mt[1] - rand_walk_t$Mt[length(rand_walk_t$Mt)]) /
(length(rand_walk_t$Mt) - 1)
ggplot2::ggplot(rand_walk_t, ggplot2::aes(Mt)) +
ggplot2::geom_histogram(ggplot2::aes(weight = Pr / interval), binwidth = interval) +
ggplot2::scale_x_continuous(limits = c(-7.5, 7.5)) +
ggplot2::stat_function(fun = dnorm,
color = "blue",
args = list(mean = 0,
sd = sqrt(4)))
install.packages(cowplot)
install.packages('cowplot')
bm1 <- sbmotion(time_to_maturity = 4,
scale = 100,
reproducible = T)
bm2 <- sbmotion(time_to_maturity = 4,
scale = 200,
reproducible = T)
# Update the bm2 object such as it keeps the same generated data but
# fits to the bm1's timeframe.
bm2 <- bm2[seq(1, nrow(bm2), by = 2), ]
attr(bm2, "scale") <- 100
attr(bm2, 'row.names') <- attr(bm1, 'row.names')
# Test the ressemblance of the 2 (same I hope) Brownian motion
identical(bm1, bm2)
bm1 <- sbmotion(time_to_maturity = 4,
scale = 100,
reproducible = T)
bm2 <- sbmotion(time_to_maturity = 4,
scale = 200,
reproducible = T)
# Update the bm2 object such as it keeps the same generated data but
# fits to the bm1's timeframe.
sub_bm2 <- bm2[seq(1, nrow(bm2), by = 2), ]
attr(sub_bm2, "scale") <- 100
attr(sub_bm2, 'row.names') <- attr(bm1, 'row.names')
# Test the ressemblance of the 2 (same I hope) Brownian motion
identical(bm1, sub_bm2)
names(bm1)
plot1 <- ggplot(bm1, aes('time_periods',
'brownian_motion_path')) +
geom_point
plot1 <- ggplot(bm1, aes('time_periods',
'brownian_motion_path')) +
geom_point()
plot1
bm1
ggplot(bm1, aes('time_periods',
'brownian_motion_path')) +
geom_point()
bm1
ggplot(bm1, aes('time_periods',
'brownian_motion_path')) +
geom_line()
plot1 <- ggplot(bm1, aes(time_periods,
brownian_motion_path)) +
geom_point()
plot1
bm1
plot1 <- ggplot(bm1, aes(time_periods,
brownian_motion_path)) +
geom_line()
plot1
bm1 <- sbmotion(time_to_maturity = 4,
scale = 1000,
reproducible = T)
bm2 <- sbmotion(time_to_maturity = 4,
scale = 2000,
reproducible = T)
plot1 <- ggplot(bm1, aes(time_periods,
brownian_motion_path)) +
geom_line()
plot1
bm1 <- sbmotion(time_to_maturity = 4,
scale = 1000,
reproducible = F)
ggplot(bm1, aes(time_periods,
brownian_motion_path)) +
geom_line()
bm1 <- sbmotion(time_to_maturity = 4,
scale = 1000,
reproducible = F)
ggplot(bm1, aes(time_periods,
brownian_motion_path)) +
geom_point()
bm1 <- sbmotion(time_to_maturity = 4,
scale = 100,
reproducible = F)
ggplot(bm1, aes(time_periods,
brownian_motion_path)) +
geom_point()
Sampled <- sbmotionGenerator(time_to_maturity = 4, scale = 100, n = 5)
ggplot2::ggplot(dplyr::bind_rows(Sampled, .id = "uniqueID"),
ggplot2::aes(x = time_periods, y = brownian_motion_path, group = uniqueID)) +
ggplot2::geom_point(alpha=0.5, ggplot2::aes(colour = uniqueID)) +
ggplot2::theme(legend.position = 'none') +
ggplot2::labs(title = 'Multiple Brownian Motions path with time to maturity fixed at 4',
caption = 'Multiple Brownian Motions paths',
x = 'Time period',
y = 'Brownian motion')
Sampled <- sbmotionGenerator(time_to_maturity = 4, scale = 100, n = 99)
ggplot2::ggplot(dplyr::bind_rows(Sampled, .id = "uniqueID"),
ggplot2::aes(x = time_periods, y = brownian_motion_path, group = uniqueID)) +
ggplot2::geom_point(alpha=0.5, ggplot2::aes(colour = uniqueID)) +
ggplot2::theme(legend.position = 'none') +
ggplot2::labs(title = 'Multiple Brownian Motions path with time to maturity fixed at 4',
caption = 'Multiple Brownian Motions paths',
x = 'Time period',
y = 'Brownian motion')
Sampled <- sbmotionGenerator(time_to_maturity = 4, scale = 100, n = 6)
ggplot2::ggplot(dplyr::bind_rows(Sampled, .id = "uniqueID"),
ggplot2::aes(x = time_periods, y = brownian_motion_path, group = uniqueID)) +
ggplot2::geom_point(alpha=0.5, ggplot2::aes(colour = uniqueID)) +
ggplot2::theme(legend.position = 'none') +
ggplot2::labs(title = 'Multiple Brownian Motions path with time to maturity fixed at 4',
caption = 'Multiple Brownian Motions paths',
x = 'Time period',
y = 'Brownian motion')
library(RandomWalk)
library(RandomWalk)
library(StockPriceSimulator)
library(ggplot2)
library(cowplot)
rand_walk <- srwalk(time_to_maturity = 4,
seed = 1,
scale = 100)
ggplot(rand_walk, aes(time_periods, random_walk_path)) +
geom_line()
Sampled <- sbmotionGenerator(time_to_maturity = 4, scale = 100, n = 6)
ggplot2::ggplot(dplyr::bind_rows(Sampled, .id = "uniqueID"),
ggplot2::aes(x = time_periods, y = brownian_motion_path, group = uniqueID)) +
ggplot2::geom_point(alpha=0.5, ggplot2::aes(colour = uniqueID)) +
ggplot2::theme(legend.position = 'none') +
ggplot2::labs(title = 'Multiple Brownian Motions path with time to maturity fixed at 4',
caption = 'Multiple Brownian Motions paths',
x = 'Time period',
y = 'Brownian motion')
# Quad variation, joint density, mgf...
rand_walk <- srwalk(time_to_maturity = 4,
seed = 1,
scale = 1)
ggplot(rand_walk, aes(time_periods, random_walk_path)) +
geom_line()
?srwalk
library(RandomWalk)
?srwalk
?RandomWalk
library(RandomWalk)
brownian_motion <- sbmotion(time_to_maturity = 4, scale = 360, seed = 3)
brownian_motion
library(StockPriceSimulator)
S <- sstock(initial_stock_price = 50, time_to_maturity = 4, scale = 360, seed = 3,
sigma = .2, alpha = .05)
S
ggplot(S, aes(time_periods, stock_price_path)) + geom_line()
library(ggplot2)
ggplot(S, aes(time_periods, stock_price_path)) + geom_line()
S_ito <- sstock_ito(initial_stock_price = 50, time_to_maturity = 4, scale = 360, seed = 3,
sigma = .2, alpha = .05)
ggplot(S_ito, aes(time_periods, stock_price_path)) + geom_line()
ggplot(S, aes(time_periods, stock_price_path)) + geom_line()
ggplot(S, aes(time_periods, stock_price_path)) + geom_line()
ggplot(S_ito, aes(time_periods, stock_price_path)) + geom_line()
ggplot(S, aes(time_periods, stock_price_path)) + geom_line()
markov <- sbmotionGenerator(n= 100)
library(RandomWalk)
markov <- sbmotionGenerator(n= 100)
str(markov)
version
