prob = c(p, q),
size = size)
Xs <- list()
lapply(Xs, sample, x = c(-1,1), replace = T, prob = c(p, q), size = k)
dirname(sys.frame(1)$ofile)
getwd()
setwd(".")
getwd()
setwd(".")
getwd()
source("yourfile.R", chdir = T)
source("", chdir = T)
source(".", chdir = T)
sys.frame(1)
sys.frame()
dev.off()
# Probability measure:
p <- 1/2
q <- 1 - p
size <- 300
spread <- 3000
M <- 0
###
# Mt and fi are dataframe with size = (size + 1) * (size + 1)
# All value inside Mt and fi are zero.
# check ate Initialisation section for size value.
###
Mt <- fi <- data.frame(matrix(rep(0, (size + 1)^2), nrow = size + 1))
l <- 300
k <- 200
##
# Generation
##
X <- sample(x = c(-1, 1),
size = size,
replace = T,
prob = c(p, q)
)
# Following lines must be changed into apply type function:
for(i in 1:size)
M[i + 1] <- sum(X[1:i]) # i + 1 because M[0] from theory is indeed represented by M[1] in this code.
# Same result with apply type function:
M_k <- c(0,
sapply(seq_along(X), function(x){sum(X[1:x])}))
##
# Check by plot
##
plot(M_k,
type = 'l')
################################################################################
# Creation of a 300 steps random walk
################################################################################
##
# Construction of the theoretical Random Variable M based on the filtration F(t)
# See document "randomWalkDistributionAnalysis.jgp"
##
# Usual wrong way:
# Profiling give 1200 Ms
for(j in 1:(size + 1))
for(i in 1:j)
Mt[i,j] <- (j-i) + (1-i)
# Functional Way:
# No information from profiler: too fast
dim_x <- dim_y <- 1:(size + 1)
o <- outer(dim_x,
dim_y,
FUN=function(r,c){(r-c) + (1-c)} )
to <- t(o)
subset <- upper.tri(to, diag = T)
Mk <- to * subset
# Better functional way:
dim_x <- dim_y <- 1:(size + 1)
o <- outer(dim_x,
dim_y,
FUN=function(r,c){ifelse(c>=r, (c-r) - (r-1), NA_integer_)})
##
# Construction of the distribution of the theoretical random variable
##
# Usual wrong way:
# Profiling give 1200 Ms
for(j in 1:(size+1))
for(i in 1:j)
fi[i, j] <- choose((j-1),
(j-i)) * p^(j-1)
# Same results following funcional way
fi <- outer(dim_x,
dim_y,
FUN = function(i, j){choose((j-1), (j-i)) * p^(j-1)})
##
# Graph of the Theoretical distribution
##
range <- 1:ncol(Mk)
lastToss <- ncol(Mk)
# Using plot
plot(Mk[range, lastToss],
fi[range, lastToss],
type = 'l',
xlim = c(-75, 75))
# Using ggplot
# data.frame which map distribution and random variable:
distributionSymRanWal <- data.frame(
Value = Mt[range, lastToss],
Frequency = fi[range, lastToss]
)
# For the sake of visibility the limit of X axis has been set to [-100, 100]
library(ggplot2)
ggplot(data = distributionSymRanWal, aes(Value, Frequency)) +
geom_line() +
scale_x_continuous(limits = c(-100, 100))
################################################################################
# Check the martingale property of symmetric random walk.
################################################################################
#
# With l > k, show that:
# E[Ml|F(k)] = Mk
##
# first: simple NOT CONDITIONAL Expectation
# E[M200] should equal zero because:
# M0 = 0 and Because Mt is a martingale thus:
# E[M200|f(0)] = E[M200] - 0
##
EM200 = sum(Mt[1:200, 200] * fi[1:200, 200]) # equal zero.
##
# Expectation of Mt_l at k
# denoted by: E[Mt_l|f(k)], with k < l
##
##
# Variables
##
from <- 2 # Departure of the Expectation
k <- 4 # To get the filtration point
l <- 19 # Give the period to be expected
if(k>l)
interval <- l-k
##
# Partionated Symmetric Random Walk
##
# first the value of M at time $k$ has to be set. It means that the value at this time $k$ is not yet random but resolved.
# Therefore at time $k$ the variable $M_k$ is not random.
# We can take any value we want to start with from 1 to $k + 1$.
# I choose to name this variable $from$:
from <- 2 # Departure of the Expectation
# The lenght of the path is already know: $(l - k)$:
len <- l - k
i <- from:(from + len)
j <- k:l
df <- Mk[i, j]
# names(df) <- sapply(1:ncol(df), function(x){paste0("X",x)})
##
# Con
##
# The probability from k to l start from k to l. The probability table has therefore to be taken from begining.
fi_min <- fi[1:(len+1), 1:(len+1)]
# Old calculation of fi:
#
# fi <- data.frame(matrix(rep(0, (l-k + 1)^2), nrow = l-k + 1))
# for(j in 1:(l-k+1))
#   for(i in 1:j)
#     fi[i, j] <- choose((j-1), (i-1)) * p^(j-1)#((j-1)*p^(j-1))/(factorial(j-1)*factorial(1+i))
# Finally compute the expectation E[Mt_l|f(k)]:
Mk[from, k]
sum(df[, l-k+1] * fi_min[, l-k+1]) #Yeah it is a matringale
########################################
# Create a 300 steps random walk
########################################
# Empirical distribution based on a series of outcomes of symmetric random walk
k <- size <- 3000
# n is the number of case
n <- spread <- 300000
Xs <- list()
for(i in 1:spread)
Xs[[i]] <- sample(x = c(-1, 1),
replace = T,
prob = c(p, q),
size = size)
lapply(Xs, sample, x = c(-1,1), replace = T, prob = c(p, q), size = k)
Wn <- vector()
for(i in 1:spread)
Wn[i] <- sum(Xs[[i]])
hist(Wn)
# Increments:
x
X
X_table <- rbind(x)
X_table <- rbind(X)
xtable(X_table)
library(xtable)
xtable(X_table)
xtable(X_table, digits = 0)
X_tab <- rbind(X)
names(X_tab)
X_tab
col_names(X_tab)
colname(X_tab)
colnames(X_tab)
head(X_tab)
str(X_tab)
num[1,1]
X_tab[1,1]
X_tab[1,2]
X_tab[5,2]
X_tab[1,300]
colnames(X_tab) <- 1:300
xtable(X_tab, digits = 0)
paste0("f", 1:300)
colnames(X_tab) <- paste0("f", 1:300)
xtable(X_tab, digits = 0)
colnames(X_tab) <- paste0("F(", 1:300, ")")
xtable(X_tab, digits = 0)
Xk <- c(1, -1)
weighted.mean(Xk, c(p, q))
Ex <- weighted.mean(Xk, c(p, q))
Ex.square <- weighted.mean(Xk^2, c(p, q))
Ex <- weighted.mean(Xk, c(p, q))
Ex.square <- weighted.mean(Xk^2, c(p, q))
# Variance
S <- Ex.square - Ex^2
S
rm(ls())
rm(list = ls())
library(ggplot2)
p <- 1/2
q <- 1 - p
figure <- paste(getwd(), 'Chapter3', 'figure', sep = '/')
k <- 3000
asize <- 75000
X <- sample(x = c(-1, 1),
size = k,
replace = T,
prob = c(p, q)
)
#
# Construction of the Empirical Random Walk
#
Mk <- c(0,
sapply(seq_along(X), function(x){sum(X[1:x])}))
##
# Check by plot
##
file <- paste(figure, 'EmpiricalSymmetricRandomWalkSample.pdf', sep = '/')
pdf(file = file)
plot(Mk,
type = 'l')
dev.off()
Mkr <- matrix(data = sample(x = c(-1, 1),
replace = T,
prob = c(p, q),
size = k*asize),
nrow = asize,
ncol = k
)
Mki <- sapply(as.data.frame(Mkr),
sum)
str(Mki)
str(as.data.frame(Mkr))
rowsum(as.data.frame(Mkr))
rowSums(as.data.frame())
rowSums(as.data.frame(Mkr))
Mki <- rowSums(Mkr)
str(Mki)
sum(Mki)
mean(Mki)
Mkr <- matrix(data = sample(x = c(-1, 1),
replace = T,
prob = c(p, q),
size = k*asize),
nrow = asize,
ncol = k
)
#
# Calculate the empirical distribution
# First by computing the Expectation
#
#   *[Mki] : Array containing the final step of the random work at time F(T)
#   *[Empir] :  Empirical expectation of Symmetric Random Walk.
#               [Mki] contains a sample of symmetric Random Value for time = T
#               To compute the expectation I only use the function *mean* on [Mki]
#
Mki <- rowSums(Mkr)
Empir <- mean(Mki)
file <- paste(folder, 'EmpiricalDistribution.pdf', sep = '/')
file <- paste(figure, 'EmpiricalDistribution.pdf', sep = '/')
file
file <- paste(figure, 'EmpiricalDistribution.pdf', sep = '/')
pdf(file = file)
hist(Mki)
dev.off()
str(Mki)
32/300
300/300
Mkd <- cbind(Mki)
Mkd
length(Mki)
Mkd <- cbind(Mki, 1/length(Mki))
head(Mkd)
sum(Mkdp[,2])
sum(Mkd[,2])
names(Mkd)
colnames(Mkd)
colnames(Mkd) <- c('RandomValue', 'Frequency')
head(Mki)
head(Mkd)
aggregate(RandomValue ~ Frequency, Mkd, sum)
aggregate(Frequency ~ RandomValue, Mkd, sum)
MkHistogramFormated <- aggregate(Frequency ~ RandomValue, Mkd, sum)
ggplot(Mkd, aes(RandomValue)) +
geom_histogram()
as.data.frame(Mkd <- cbind(Mki, 1/length(Mki)))
colnames(Mkd) <- c('RandomValue', 'Frequency')
MkHistogramFormated <- aggregate(Frequency ~ RandomValue, Mkd, sum)
ggplot(Mkd, aes(RandomValue)) +
geom_histogram()
Mkd <- cbind(Mki, 1/length(Mki))
as.data.frame(Mkd)
as.data.frame(Mkd)
a <- as.data.frame(Mkd)
a
typeof(a)
class(a)
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram()
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram()
colnames(a)
colnames(Mkd)
Mkd <- cbind(Mki, 1/length(Mki))
colnames(Mkd) <- c('RandomValue', 'Frequency')
MkHistogramFormated <- aggregate(Frequency ~ RandomValue, Mkd, sum)
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram()
colnames(Mkd) <- c('RandomValue', 'Frequency')
MkHistogramFormated <- aggregate(Frequency ~ RandomValue, Mkd, sum)
ggplot(as.data.frame(Mkd), aes(RandomValue, Frequency)) +
geom_histogram()
ggplot(as.data.frame(Mkd), aes(RandomValue, Frequency)) +
geom_histogram(stat = "identity")
ggplot(as.data.frame(Mkd), aes(RandomValue, Frequency)) +
geom_histogram(stat = "identity",
binwidth = 30)
ggplot(as.data.frame(Mkd), aes(RandomValue, Frequency)) +
geom_histogram(stat = "bin",
binwidth = 30)
ggplot(as.data.frame(Mkd), aes(RandomValue, Frequency)) +
geom_histogram(stat = "identity",
binwidth = 30)
ggplot(as.data.frame(Mkd), aes(RandomValue, Frequency)) +
geom_bar()
ggplot(as.data.frame(Mkd), aes(RandomValue, Frequency)) +
geom_col()
ggplot(as.data.frame(Mkd), aes(RandomValue, Frequency)) +
geom_col(width = 30)
ggplot(as.data.frame(Mkd), aes(RandomValue, Frequency)) +
geom_col(width = 10)
ggplot(as.data.frame(Mkd), aes(RandomValue, Frequency)) +
geom_col(width = 5)
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram()
ggplot(as.data.frame(Mkd), aes(RandomValue, Frequency)) +
geom_col()
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram() +
scale_y_continuous(labels = scales::percent)
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram(aes(y = (..count..)/sum(..count..)))
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram(aes(y = (..count..)/sum(..count..))) +
scale_y_continuous(labels = scale::percent)
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram(aes(y = (..count..)/sum(..count..))) +
scale_y_continuous(labels = scales::percent)
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram(aes(y = (..count..)/sum(..count..)))
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram(aes(y = (..count..)/sum(..count..))) +
scale_y_continuous(labels = scales::percent)
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram(aes(y = (..count..)/sum(..count..))) +
scale_y_continuous(labels = scales::percent) +
theme_bw
hist(Mki)
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram(aes(y = (..count..)/sum(..count..))) +
scale_y_continuous(labels = scales::percent) +
theme_bw
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram(aes(y = (..count..)/sum(..count..))) +
scale_y_continuous(labels = scales::percent)
Mkd <- cbind(RandomValue = Mki,
Frequency = 1/length(Mki))
Mkd <- cbind(RandomValue = Mki,
Frequency = 1/length(Mki))
MkHistogramFormated <- aggregate(Frequency ~ RandomValue, Mkd, sum)
file <- paste(figure, 'EmpiricalDistribution.pdf', sep = '/')
pdf(file = file)
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram(aes(y = (..count..)/sum(..count..))) +
scale_y_continuous(labels = scales::percent)
dev.off()
Mkd <- cbind(RandomValue = Mki,
Frequency = 1/length(Mki))
MkHistogramFormated <- aggregate(Frequency ~ RandomValue, Mkd, sum)
file <- paste(figure, 'EmpiricalDistribution.pdf', sep = '/')
pdf(file = file)
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram(aes(y = (..count..)/sum(..count..))) +
scale_y_continuous(labels = scales::percent)
dev.off()
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram(aes(y = (..count..)/sum(..count..))) +
scale_y_continuous(labels = scales::percent)
pdf(file = file)
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram(aes(y = (..count..)/sum(..count..))) +
scale_y_continuous(labels = scales::percent)
dev.off()
dev.off()
dev.off()
pdf(file = file)
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram(aes(y = (..count..)/sum(..count..))) +
scale_y_continuous(labels = scales::percent)
dev.off()
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram(aes(y = (..count..)/sum(..count..)),
binwidth = 15) +
scale_y_continuous(labels = scales::percent)
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram(aes(y = (..count..)/sum(..count..)),
binwidth = 5) +
scale_y_continuous(labels = scales::percent)
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram(aes(y = (..count..)/sum(..count..)),
binwidth = 60) +
scale_y_continuous(labels = scales::percent)
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram(aes(y = (..count..)/sum(..count..)),
binwidth = 40) +
scale_y_continuous(labels = scales::percent)
geom_histogram(aes(y = (..count..)/sum(..count..)),
binwidth = 20) +
scale_y_continuous(labels = scales::percent)
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram(aes(y = (..count..)/sum(..count..)),
binwidth = 20) +
scale_y_continuous(labels = scales::percent)
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram(aes(y = (..count..)/sum(..count..)),
binwidth = 15) +
scale_y_continuous(labels = scales::percent)
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram(aes(y = (..count..)/sum(..count..)),
binwidth = 10) +
scale_y_continuous(labels = scales::percent)
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram(aes(y = (..count..)/sum(..count..)),
binwidth = 7) +
scale_y_continuous(labels = scales::percent)
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram(aes(y = (..count..)/sum(..count..)),
binwidth = 1) +
scale_y_continuous(labels = scales::percent)
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram(aes(y = (..count..)/sum(..count..)),
binwidth = 10) +
scale_y_continuous(labels = scales::percent)
pdf(file = file)
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram(aes(y = (..count..)/sum(..count..)),
binwidth = 10) +
scale_y_continuous(labels = scales::percent)
dev.off()
pdf(file = file)
ggplot(as.data.frame(Mkd), aes(RandomValue)) +
geom_histogram(aes(y = (..count..)/sum(..count..)),
binwidth = 10) +
scale_y_continuous(labels = scales::percent)
dev.off()
t0 <- 0
t1 <- 1
S0 <- 4
u <- 2
d <- 1/2
r <- 1/4
p <- 0.5
##
# Computed value - Do not touch it even if you are a Jedi
##
S1H <- u * S0
S1T <- d * S0
q <- 1 - p
and
&&
`&&`
`&`
if(
0 < d &
d < (1 + r) &
(1 + r) < u
) print("Arbitrage opportunity mays occur")
else print("According to declared varible no arbitrage opportunity exhibit.")
if(
0 < d &
d < (1 + r) &
(1 + r) < u
) print("Arbitrage opportunity mays occur") else
print("According to declared varible no arbitrage opportunity exhibit.")
if(
0 < d &
d < (1 + r) &
(1 + r) < u
) print("According to declared varible no arbitrage opportunity exhibit.") else
print("Arbitrage opportunity mays occur")
